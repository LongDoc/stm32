
stm32h750vbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000357c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003814  08003814  00004814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003828  08003828  00004828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800382c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  24000010  0800383c  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000044  0800383c  00005044  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008dcc  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001787  00000000  00000000  0000de0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000007a0  00000000  00000000  0000f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000005a2  00000000  00000000  0000fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000353ec  00000000  00000000  000102da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000095ce  00000000  00000000  000456c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001518f3  00000000  00000000  0004ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a0587  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d6c  00000000  00000000  001a05cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  001a2338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080037fc 	.word	0x080037fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080037fc 	.word	0x080037fc

080002d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80002de:	f000 f8f5 	bl	80004cc <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002e2:	f000 fa8d 	bl	8000800 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002e6:	f000 f83b 	bl	8000360 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002ea:	f000 f8bb 	bl	8000464 <MX_GPIO_Init>
	MX_RNG_Init();
 80002ee:	f000 f8a3 	bl	8000438 <MX_RNG_Init>
	uint32_t randomNumber;
	/* Infinite loop */
	while (1)
	{

		if (HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber) == HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4818      	ldr	r0, [pc, #96]	@ (8000358 <main+0x80>)
 80002f8:	f003 f9fe 	bl	80036f8 <HAL_RNG_GenerateRandomNumber>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d118      	bne.n	8000334 <main+0x5c>
		{
			if (randomNumber % 2)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d009      	beq.n	8000320 <main+0x48>
			{
				HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2108      	movs	r1, #8
 8000310:	4812      	ldr	r0, [pc, #72]	@ (800035c <main+0x84>)
 8000312:	f000 fe43 	bl	8000f9c <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000316:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031a:	f000 fb03 	bl	8000924 <HAL_Delay>
 800031e:	e010      	b.n	8000342 <main+0x6a>
			}
			else
			{
				HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2108      	movs	r1, #8
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <main+0x84>)
 8000326:	f000 fe39 	bl	8000f9c <HAL_GPIO_WritePin>
				HAL_Delay(2000);
 800032a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800032e:	f000 faf9 	bl	8000924 <HAL_Delay>
 8000332:	e006      	b.n	8000342 <main+0x6a>
			}
		}
		else
		{
			HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2108      	movs	r1, #8
 8000338:	4808      	ldr	r0, [pc, #32]	@ (800035c <main+0x84>)
 800033a:	f000 fe2f 	bl	8000f9c <HAL_GPIO_WritePin>
			while (1);
 800033e:	bf00      	nop
 8000340:	e7fd      	b.n	800033e <main+0x66>
		}

		HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2108      	movs	r1, #8
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <main+0x84>)
 8000348:	f000 fe28 	bl	8000f9c <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 800034c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000350:	f000 fae8 	bl	8000924 <HAL_Delay>
		if (HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber) == HAL_OK)
 8000354:	e7cd      	b.n	80002f2 <main+0x1a>
 8000356:	bf00      	nop
 8000358:	2400002c 	.word	0x2400002c
 800035c:	58021000 	.word	0x58021000

08000360 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b09c      	sub	sp, #112	@ 0x70
 8000364:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800036a:	224c      	movs	r2, #76	@ 0x4c
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f003 fa18 	bl	80037a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2220      	movs	r2, #32
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f003 fa12 	bl	80037a4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000380:	2002      	movs	r0, #2
 8000382:	f000 fe25 	bl	8000fd0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000386:	2300      	movs	r3, #0
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	4b29      	ldr	r3, [pc, #164]	@ (8000430 <SystemClock_Config+0xd0>)
 800038c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800038e:	4a28      	ldr	r2, [pc, #160]	@ (8000430 <SystemClock_Config+0xd0>)
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000396:	4b26      	ldr	r3, [pc, #152]	@ (8000430 <SystemClock_Config+0xd0>)
 8000398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	4b24      	ldr	r3, [pc, #144]	@ (8000434 <SystemClock_Config+0xd4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003a8:	4a22      	ldr	r2, [pc, #136]	@ (8000434 <SystemClock_Config+0xd4>)
 80003aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b20      	ldr	r3, [pc, #128]	@ (8000434 <SystemClock_Config+0xd4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003bc:	bf00      	nop
 80003be:	4b1d      	ldr	r3, [pc, #116]	@ (8000434 <SystemClock_Config+0xd4>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003ca:	d1f8      	bne.n	80003be <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80003cc:	2322      	movs	r3, #34	@ 0x22
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2340      	movs	r3, #64	@ 0x40
 80003d6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003dc:	2300      	movs	r3, #0
 80003de:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fe2d 	bl	8001044 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80003f0:	f000 f898 	bl	8000524 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	233f      	movs	r3, #63	@ 0x3f
 80003f6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2101      	movs	r1, #1
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fa6d 	bl	80018f8 <HAL_RCC_ClockConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000424:	f000 f87e 	bl	8000524 <Error_Handler>
	}
}
 8000428:	bf00      	nop
 800042a:	3770      	adds	r7, #112	@ 0x70
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	58000400 	.word	0x58000400
 8000434:	58024800 	.word	0x58024800

08000438 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 800043c:	4b07      	ldr	r3, [pc, #28]	@ (800045c <MX_RNG_Init+0x24>)
 800043e:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <MX_RNG_Init+0x28>)
 8000440:	601a      	str	r2, [r3, #0]
	hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <MX_RNG_Init+0x24>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000448:	4804      	ldr	r0, [pc, #16]	@ (800045c <MX_RNG_Init+0x24>)
 800044a:	f003 f8f3 	bl	8003634 <HAL_RNG_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_RNG_Init+0x20>
	{
		Error_Handler();
 8000454:	f000 f866 	bl	8000524 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	2400002c 	.word	0x2400002c
 8000460:	48021800 	.word	0x48021800

08000464 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000478:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <MX_GPIO_Init+0x60>)
 800047a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800047e:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <MX_GPIO_Init+0x60>)
 8000480:	f043 0310 	orr.w	r3, r3, #16
 8000484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000488:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <MX_GPIO_Init+0x60>)
 800048a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800048e:	f003 0310 	and.w	r3, r3, #16
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2108      	movs	r1, #8
 800049a:	480b      	ldr	r0, [pc, #44]	@ (80004c8 <MX_GPIO_Init+0x64>)
 800049c:	f000 fd7e 	bl	8000f9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3_Pin */
	GPIO_InitStruct.Pin = PE3_Pin;
 80004a0:	2308      	movs	r3, #8
 80004a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	4804      	ldr	r0, [pc, #16]	@ (80004c8 <MX_GPIO_Init+0x64>)
 80004b6:	f000 fbc1 	bl	8000c3c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80004ba:	bf00      	nop
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	58024400 	.word	0x58024400
 80004c8:	58021000 	.word	0x58021000

080004cc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80004de:	f000 fb35 	bl	8000b4c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004ee:	231f      	movs	r3, #31
 80004f0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80004f2:	2387      	movs	r3, #135	@ 0x87
 80004f4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004fa:	2300      	movs	r3, #0
 80004fc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004fe:	2301      	movs	r3, #1
 8000500:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000502:	2301      	movs	r3, #1
 8000504:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800050e:	463b      	mov	r3, r7
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fb53 	bl	8000bbc <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000516:	2004      	movs	r0, #4
 8000518:	f000 fb30 	bl	8000b7c <HAL_MPU_Enable>

}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <Error_Handler+0x8>

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x30>)
 8000538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800053c:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <HAL_MspInit+0x30>)
 800053e:	f043 0302 	orr.w	r3, r3, #2
 8000542:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_MspInit+0x30>)
 8000548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	58024400 	.word	0x58024400

08000564 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0b4      	sub	sp, #208	@ 0xd0
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	22c0      	movs	r2, #192	@ 0xc0
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f003 f915 	bl	80037a4 <memset>
  if(hrng->Instance==RNG)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <HAL_RNG_MspInit+0x6c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d121      	bne.n	80005c8 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000584:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fcdc 	bl	8001f58 <HAL_RCCEx_PeriphCLKConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80005a6:	f7ff ffbd 	bl	8000524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_RNG_MspInit+0x70>)
 80005ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80005b0:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_RNG_MspInit+0x70>)
 80005b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_RNG_MspInit+0x70>)
 80005bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80005c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80005c8:	bf00      	nop
 80005ca:	37d0      	adds	r7, #208	@ 0xd0
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48021800 	.word	0x48021800
 80005d4:	58024400 	.word	0x58024400

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <NMI_Handler+0x4>

080005e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <MemManage_Handler+0x4>

080005f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f959 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800063c:	4b43      	ldr	r3, [pc, #268]	@ (800074c <SystemInit+0x114>)
 800063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000642:	4a42      	ldr	r2, [pc, #264]	@ (800074c <SystemInit+0x114>)
 8000644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800064c:	4b40      	ldr	r3, [pc, #256]	@ (8000750 <SystemInit+0x118>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	2b06      	cmp	r3, #6
 8000656:	d807      	bhi.n	8000668 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000658:	4b3d      	ldr	r3, [pc, #244]	@ (8000750 <SystemInit+0x118>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	4a3b      	ldr	r2, [pc, #236]	@ (8000750 <SystemInit+0x118>)
 8000662:	f043 0307 	orr.w	r3, r3, #7
 8000666:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000668:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <SystemInit+0x11c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a39      	ldr	r2, [pc, #228]	@ (8000754 <SystemInit+0x11c>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000674:	4b37      	ldr	r3, [pc, #220]	@ (8000754 <SystemInit+0x11c>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800067a:	4b36      	ldr	r3, [pc, #216]	@ (8000754 <SystemInit+0x11c>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4935      	ldr	r1, [pc, #212]	@ (8000754 <SystemInit+0x11c>)
 8000680:	4b35      	ldr	r3, [pc, #212]	@ (8000758 <SystemInit+0x120>)
 8000682:	4013      	ands	r3, r2
 8000684:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000686:	4b32      	ldr	r3, [pc, #200]	@ (8000750 <SystemInit+0x118>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	2b00      	cmp	r3, #0
 8000690:	d007      	beq.n	80006a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000692:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <SystemInit+0x118>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f023 030f 	bic.w	r3, r3, #15
 800069a:	4a2d      	ldr	r2, [pc, #180]	@ (8000750 <SystemInit+0x118>)
 800069c:	f043 0307 	orr.w	r3, r3, #7
 80006a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <SystemInit+0x11c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <SystemInit+0x11c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <SystemInit+0x11c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <SystemInit+0x11c>)
 80006b6:	4a29      	ldr	r2, [pc, #164]	@ (800075c <SystemInit+0x124>)
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <SystemInit+0x11c>)
 80006bc:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <SystemInit+0x128>)
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <SystemInit+0x11c>)
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <SystemInit+0x12c>)
 80006c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <SystemInit+0x11c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006cc:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <SystemInit+0x11c>)
 80006ce:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <SystemInit+0x12c>)
 80006d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <SystemInit+0x11c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <SystemInit+0x11c>)
 80006da:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <SystemInit+0x12c>)
 80006dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x11c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <SystemInit+0x11c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000754 <SystemInit+0x11c>)
 80006ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006f0:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <SystemInit+0x11c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <SystemInit+0x130>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <SystemInit+0x134>)
 80006fc:	4013      	ands	r3, r2
 80006fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000702:	d202      	bcs.n	800070a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <SystemInit+0x138>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <SystemInit+0x11c>)
 800070c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d113      	bne.n	8000740 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <SystemInit+0x11c>)
 800071a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071e:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <SystemInit+0x11c>)
 8000720:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000724:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x13c>)
 800072a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800072e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <SystemInit+0x11c>)
 8000732:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000736:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <SystemInit+0x11c>)
 8000738:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800073c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	52002000 	.word	0x52002000
 8000754:	58024400 	.word	0x58024400
 8000758:	eaf6ed7f 	.word	0xeaf6ed7f
 800075c:	02020200 	.word	0x02020200
 8000760:	01ff0000 	.word	0x01ff0000
 8000764:	01010280 	.word	0x01010280
 8000768:	5c001000 	.word	0x5c001000
 800076c:	ffff0000 	.word	0xffff0000
 8000770:	51008108 	.word	0x51008108
 8000774:	52004000 	.word	0x52004000

08000778 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <ExitRun0Mode+0x2c>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <ExitRun0Mode+0x2c>)
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000788:	bf00      	nop
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <ExitRun0Mode+0x2c>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f9      	beq.n	800078a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	58024800 	.word	0x58024800

080007a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007a8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80007e4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80007ac:	f7ff ffe4 	bl	8000778 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b0:	f7ff ff42 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	@ (80007ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	@ (80007f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f002 ffeb 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007de:	f7ff fd7b 	bl	80002d8 <main>
  bx  lr
 80007e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007ec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007f0:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 80007f4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007f8:	24000044 	.word	0x24000044

080007fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC3_IRQHandler>
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000806:	2003      	movs	r0, #3
 8000808:	f000 f96e 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800080c:	f001 fa2a 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8000810:	4602      	mov	r2, r0
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_Init+0x68>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	f003 030f 	and.w	r3, r3, #15
 800081c:	4913      	ldr	r1, [pc, #76]	@ (800086c <HAL_Init+0x6c>)
 800081e:	5ccb      	ldrb	r3, [r1, r3]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	fa22 f303 	lsr.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_Init+0x68>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_Init+0x6c>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	fa22 f303 	lsr.w	r3, r2, r3
 8000840:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <HAL_Init+0x70>)
 8000842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <HAL_Init+0x74>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f814 	bl	8000878 <HAL_InitTick>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e002      	b.n	8000860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800085a:	f7ff fe69 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58024400 	.word	0x58024400
 800086c:	08003814 	.word	0x08003814
 8000870:	24000004 	.word	0x24000004
 8000874:	24000000 	.word	0x24000000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_InitTick+0x60>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d101      	bne.n	800088c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e021      	b.n	80008d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_InitTick+0x64>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_InitTick+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f945 	bl	8000b32 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c0:	f000 f91d 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <HAL_InitTick+0x68>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2400000c 	.word	0x2400000c
 80008dc:	24000000 	.word	0x24000000
 80008e0:	24000008 	.word	0x24000008

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2400000c 	.word	0x2400000c
 8000908:	24000040 	.word	0x24000040

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	24000040 	.word	0x24000040

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff ffee 	bl	800090c <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffde 	bl	800090c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2400000c 	.word	0x2400000c

0800096c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <HAL_GetREVID+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	0c1b      	lsrs	r3, r3, #16
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	5c001000 	.word	0x5c001000

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <__NVIC_SetPriorityGrouping+0x40>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <__NVIC_SetPriorityGrouping+0x40>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00
 80009c8:	05fa0000 	.word	0x05fa0000

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff47 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff5e 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffb2 	bl	8000aa4 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b50:	f3bf 8f5f 	dmb	sy
}
 8000b54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_MPU_Disable+0x28>)
 8000b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5a:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_MPU_Disable+0x28>)
 8000b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_MPU_Disable+0x2c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	e000ed90 	.word	0xe000ed90

08000b7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_MPU_Enable+0x38>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_MPU_Enable+0x3c>)
 8000b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b92:	4a09      	ldr	r2, [pc, #36]	@ (8000bb8 <HAL_MPU_Enable+0x3c>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed90 	.word	0xe000ed90
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	785a      	ldrb	r2, [r3, #1]
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
 8000be4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7adb      	ldrb	r3, [r3, #11]
 8000bea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a9b      	ldrb	r3, [r3, #10]
 8000bf2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7b5b      	ldrb	r3, [r3, #13]
 8000bfa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7b9b      	ldrb	r3, [r3, #14]
 8000c02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7a5b      	ldrb	r3, [r3, #9]
 8000c12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a1b      	ldrb	r3, [r3, #8]
 8000c1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c28:	6113      	str	r3, [r2, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed90 	.word	0xe000ed90

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c4a:	4b89      	ldr	r3, [pc, #548]	@ (8000e70 <HAL_GPIO_Init+0x234>)
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c4e:	e194      	b.n	8000f7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8186 	beq.w	8000f74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x44>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	69b9      	ldr	r1, [r7, #24]
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0203 	and.w	r2, r3, #3
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80e0 	beq.w	8000f74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <HAL_GPIO_Init+0x238>)
 8000db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dba:	4a2e      	ldr	r2, [pc, #184]	@ (8000e74 <HAL_GPIO_Init+0x238>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <HAL_GPIO_Init+0x238>)
 8000dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd2:	4a29      	ldr	r2, [pc, #164]	@ (8000e78 <HAL_GPIO_Init+0x23c>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <HAL_GPIO_Init+0x240>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d052      	beq.n	8000ea4 <HAL_GPIO_Init+0x268>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1f      	ldr	r2, [pc, #124]	@ (8000e80 <HAL_GPIO_Init+0x244>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d031      	beq.n	8000e6a <HAL_GPIO_Init+0x22e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1e      	ldr	r2, [pc, #120]	@ (8000e84 <HAL_GPIO_Init+0x248>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d02b      	beq.n	8000e66 <HAL_GPIO_Init+0x22a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_GPIO_Init+0x24c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d025      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <HAL_GPIO_Init+0x250>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01f      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1b      	ldr	r2, [pc, #108]	@ (8000e90 <HAL_GPIO_Init+0x254>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <HAL_GPIO_Init+0x258>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_GPIO_Init+0x25c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x216>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <HAL_GPIO_Init+0x260>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x212>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_GPIO_Init+0x264>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x20e>
 8000e46:	2309      	movs	r3, #9
 8000e48:	e02d      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	e02b      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e4e:	2308      	movs	r3, #8
 8000e50:	e029      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e027      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e56:	2306      	movs	r3, #6
 8000e58:	e025      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e023      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e021      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e01f      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e01d      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e01b      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e6e:	bf00      	nop
 8000e70:	58000080 	.word	0x58000080
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58020000 	.word	0x58020000
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58020800 	.word	0x58020800
 8000e88:	58020c00 	.word	0x58020c00
 8000e8c:	58021000 	.word	0x58021000
 8000e90:	58021400 	.word	0x58021400
 8000e94:	58021800 	.word	0x58021800
 8000e98:	58021c00 	.word	0x58021c00
 8000e9c:	58022000 	.word	0x58022000
 8000ea0:	58022400 	.word	0x58022400
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb6:	4938      	ldr	r1, [pc, #224]	@ (8000f98 <HAL_GPIO_Init+0x35c>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f47f ae63 	bne.w	8000c50 <HAL_GPIO_Init+0x14>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3724      	adds	r7, #36	@ 0x24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58000400 	.word	0x58000400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00a      	beq.n	8000ffa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01f      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e01d      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f023 0207 	bic.w	r2, r3, #7
 8001002:	490f      	ldr	r1, [pc, #60]	@ (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4313      	orrs	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800100a:	f7ff fc7f 	bl	800090c <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001010:	e009      	b.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001012:	f7ff fc7b 	bl	800090c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001020:	d901      	bls.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e007      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001032:	d1ee      	bne.n	8001012 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	58024800 	.word	0x58024800

08001044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	f000 bc48 	b.w	80018e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 8088 	beq.w	8001176 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001066:	4b99      	ldr	r3, [pc, #612]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001070:	4b96      	ldr	r3, [pc, #600]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001078:	2b10      	cmp	r3, #16
 800107a:	d007      	beq.n	800108c <HAL_RCC_OscConfig+0x48>
 800107c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107e:	2b18      	cmp	r3, #24
 8001080:	d111      	bne.n	80010a6 <HAL_RCC_OscConfig+0x62>
 8001082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	4b8f      	ldr	r3, [pc, #572]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d06d      	beq.n	8001174 <HAL_RCC_OscConfig+0x130>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d169      	bne.n	8001174 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f000 bc21 	b.w	80018e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x7a>
 80010b0:	4b86      	ldr	r3, [pc, #536]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a85      	ldr	r2, [pc, #532]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e02e      	b.n	800111c <HAL_RCC_OscConfig+0xd8>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x9c>
 80010c6:	4b81      	ldr	r3, [pc, #516]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a80      	ldr	r2, [pc, #512]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b7e      	ldr	r3, [pc, #504]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a7d      	ldr	r2, [pc, #500]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xd8>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0xc0>
 80010ea:	4b78      	ldr	r3, [pc, #480]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a77      	ldr	r2, [pc, #476]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b75      	ldr	r3, [pc, #468]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a74      	ldr	r2, [pc, #464]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xd8>
 8001104:	4b71      	ldr	r3, [pc, #452]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a70      	ldr	r2, [pc, #448]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b6e      	ldr	r3, [pc, #440]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a6d      	ldr	r2, [pc, #436]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fbf2 	bl	800090c <HAL_GetTick>
 8001128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fbee 	bl	800090c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e3d4      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800113e:	4b63      	ldr	r3, [pc, #396]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xe8>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fbde 	bl	800090c <HAL_GetTick>
 8001150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fbda 	bl	800090c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e3c0      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001166:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x110>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80ca 	beq.w	8001318 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001184:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800118c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800118e:	4b4f      	ldr	r3, [pc, #316]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <HAL_RCC_OscConfig+0x166>
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	2b18      	cmp	r3, #24
 800119e:	d156      	bne.n	800124e <HAL_RCC_OscConfig+0x20a>
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d151      	bne.n	800124e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011aa:	4b48      	ldr	r3, [pc, #288]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x17e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e392      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011c2:	4b42      	ldr	r3, [pc, #264]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 0219 	bic.w	r2, r3, #25
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	493f      	ldr	r1, [pc, #252]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb9a 	bl	800090c <HAL_GetTick>
 80011d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fb96 	bl	800090c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e37c      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011ee:	4b37      	ldr	r3, [pc, #220]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	f7ff fbb7 	bl	800096c <HAL_GetREVID>
 80011fe:	4603      	mov	r3, r0
 8001200:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001204:	4293      	cmp	r3, r2
 8001206:	d817      	bhi.n	8001238 <HAL_RCC_OscConfig+0x1f4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b40      	cmp	r3, #64	@ 0x40
 800120e:	d108      	bne.n	8001222 <HAL_RCC_OscConfig+0x1de>
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001218:	4a2c      	ldr	r2, [pc, #176]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 800121a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001220:	e07a      	b.n	8001318 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	031b      	lsls	r3, r3, #12
 8001230:	4926      	ldr	r1, [pc, #152]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001236:	e06f      	b.n	8001318 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	4921      	ldr	r1, [pc, #132]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	e064      	b.n	8001318 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d047      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 0219 	bic.w	r2, r3, #25
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	491a      	ldr	r1, [pc, #104]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001264:	4313      	orrs	r3, r2
 8001266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fb50 	bl	800090c <HAL_GetTick>
 800126c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fb4c 	bl	800090c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e332      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	f7ff fb6d 	bl	800096c <HAL_GetREVID>
 8001292:	4603      	mov	r3, r0
 8001294:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001298:	4293      	cmp	r3, r2
 800129a:	d819      	bhi.n	80012d0 <HAL_RCC_OscConfig+0x28c>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	2b40      	cmp	r3, #64	@ 0x40
 80012a2:	d108      	bne.n	80012b6 <HAL_RCC_OscConfig+0x272>
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80012ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b2:	6053      	str	r3, [r2, #4]
 80012b4:	e030      	b.n	8001318 <HAL_RCC_OscConfig+0x2d4>
 80012b6:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	031b      	lsls	r3, r3, #12
 80012c4:	4901      	ldr	r1, [pc, #4]	@ (80012cc <HAL_RCC_OscConfig+0x288>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
 80012ca:	e025      	b.n	8001318 <HAL_RCC_OscConfig+0x2d4>
 80012cc:	58024400 	.word	0x58024400
 80012d0:	4b9a      	ldr	r3, [pc, #616]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	061b      	lsls	r3, r3, #24
 80012de:	4997      	ldr	r1, [pc, #604]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e018      	b.n	8001318 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b95      	ldr	r3, [pc, #596]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a94      	ldr	r2, [pc, #592]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb0b 	bl	800090c <HAL_GetTick>
 80012f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fb07 	bl	800090c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e2ed      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800130c:	4b8b      	ldr	r3, [pc, #556]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a9 	beq.w	8001478 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b85      	ldr	r3, [pc, #532]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800132e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001330:	4b82      	ldr	r3, [pc, #520]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b08      	cmp	r3, #8
 800133a:	d007      	beq.n	800134c <HAL_RCC_OscConfig+0x308>
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b18      	cmp	r3, #24
 8001340:	d13a      	bne.n	80013b8 <HAL_RCC_OscConfig+0x374>
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d135      	bne.n	80013b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800134c:	4b7b      	ldr	r3, [pc, #492]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x320>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b80      	cmp	r3, #128	@ 0x80
 800135e:	d001      	beq.n	8001364 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2c1      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001364:	f7ff fb02 	bl	800096c <HAL_GetREVID>
 8001368:	4603      	mov	r3, r0
 800136a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800136e:	4293      	cmp	r3, r2
 8001370:	d817      	bhi.n	80013a2 <HAL_RCC_OscConfig+0x35e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	2b20      	cmp	r3, #32
 8001378:	d108      	bne.n	800138c <HAL_RCC_OscConfig+0x348>
 800137a:	4b70      	ldr	r3, [pc, #448]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001382:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001388:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800138a:	e075      	b.n	8001478 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800138c:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	069b      	lsls	r3, r3, #26
 800139a:	4968      	ldr	r1, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a0:	e06a      	b.n	8001478 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a2:	4b66      	ldr	r3, [pc, #408]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	061b      	lsls	r3, r3, #24
 80013b0:	4962      	ldr	r1, [pc, #392]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b6:	e05f      	b.n	8001478 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d042      	beq.n	8001446 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013c0:	4b5e      	ldr	r3, [pc, #376]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a5d      	ldr	r2, [pc, #372]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80013c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fa9e 	bl	800090c <HAL_GetTick>
 80013d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80013d4:	f7ff fa9a 	bl	800090c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e280      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013e6:	4b55      	ldr	r3, [pc, #340]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013f2:	f7ff fabb 	bl	800096c <HAL_GetREVID>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d817      	bhi.n	8001430 <HAL_RCC_OscConfig+0x3ec>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	2b20      	cmp	r3, #32
 8001406:	d108      	bne.n	800141a <HAL_RCC_OscConfig+0x3d6>
 8001408:	4b4c      	ldr	r3, [pc, #304]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001410:	4a4a      	ldr	r2, [pc, #296]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001416:	6053      	str	r3, [r2, #4]
 8001418:	e02e      	b.n	8001478 <HAL_RCC_OscConfig+0x434>
 800141a:	4b48      	ldr	r3, [pc, #288]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	069b      	lsls	r3, r3, #26
 8001428:	4944      	ldr	r1, [pc, #272]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
 800142e:	e023      	b.n	8001478 <HAL_RCC_OscConfig+0x434>
 8001430:	4b42      	ldr	r3, [pc, #264]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	061b      	lsls	r3, r3, #24
 800143e:	493f      	ldr	r1, [pc, #252]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e018      	b.n	8001478 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a3c      	ldr	r2, [pc, #240]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800144c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fa5b 	bl	800090c <HAL_GetTick>
 8001456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800145a:	f7ff fa57 	bl	800090c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e23d      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d036      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d019      	beq.n	80014c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001490:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fa38 	bl	800090c <HAL_GetTick>
 800149c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fa34 	bl	800090c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e21a      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x45c>
 80014be:	e018      	b.n	80014f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014c4:	4a1d      	ldr	r2, [pc, #116]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fa1e 	bl	800090c <HAL_GetTick>
 80014d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fa1a 	bl	800090c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e200      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d039      	beq.n	8001572 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01c      	beq.n	8001540 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001510:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001512:	f7ff f9fb 	bl	800090c <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800151a:	f7ff f9f7 	bl	800090c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1dd      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_RCC_OscConfig+0x4f8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x4d6>
 8001538:	e01b      	b.n	8001572 <HAL_RCC_OscConfig+0x52e>
 800153a:	bf00      	nop
 800153c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001540:	4b9b      	ldr	r3, [pc, #620]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a9a      	ldr	r2, [pc, #616]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800154a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800154c:	f7ff f9de 	bl	800090c <HAL_GetTick>
 8001550:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001554:	f7ff f9da 	bl	800090c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1c0      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001566:	4b92      	ldr	r3, [pc, #584]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8081 	beq.w	8001682 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001580:	4b8c      	ldr	r3, [pc, #560]	@ (80017b4 <HAL_RCC_OscConfig+0x770>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a8b      	ldr	r2, [pc, #556]	@ (80017b4 <HAL_RCC_OscConfig+0x770>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800158c:	f7ff f9be 	bl	800090c <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001594:	f7ff f9ba 	bl	800090c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1a0      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015a6:	4b83      	ldr	r3, [pc, #524]	@ (80017b4 <HAL_RCC_OscConfig+0x770>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d106      	bne.n	80015c8 <HAL_RCC_OscConfig+0x584>
 80015ba:	4b7d      	ldr	r3, [pc, #500]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	4a7c      	ldr	r2, [pc, #496]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c6:	e02d      	b.n	8001624 <HAL_RCC_OscConfig+0x5e0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x5a6>
 80015d0:	4b77      	ldr	r3, [pc, #476]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a76      	ldr	r2, [pc, #472]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
 80015dc:	4b74      	ldr	r3, [pc, #464]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a73      	ldr	r2, [pc, #460]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e8:	e01c      	b.n	8001624 <HAL_RCC_OscConfig+0x5e0>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x5c8>
 80015f2:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	4a6e      	ldr	r2, [pc, #440]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fe:	4b6c      	ldr	r3, [pc, #432]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	4a6b      	ldr	r2, [pc, #428]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	@ 0x70
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0x5e0>
 800160c:	4b68      	ldr	r3, [pc, #416]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001610:	4a67      	ldr	r2, [pc, #412]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	@ 0x70
 8001618:	4b65      	ldr	r3, [pc, #404]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	4a64      	ldr	r2, [pc, #400]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800161e:	f023 0304 	bic.w	r3, r3, #4
 8001622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d015      	beq.n	8001658 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff f96e 	bl	800090c <HAL_GetTick>
 8001630:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff f96a 	bl	800090c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e14e      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800164a:	4b59      	ldr	r3, [pc, #356]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0ee      	beq.n	8001634 <HAL_RCC_OscConfig+0x5f0>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff f958 	bl	800090c <HAL_GetTick>
 800165c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800165e:	e00a      	b.n	8001676 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff f954 	bl	800090c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e138      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001676:	4b4e      	ldr	r3, [pc, #312]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ee      	bne.n	8001660 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 812d 	beq.w	80018e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800168c:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001694:	2b18      	cmp	r3, #24
 8001696:	f000 80bd 	beq.w	8001814 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	2b02      	cmp	r3, #2
 80016a0:	f040 809e 	bne.w	80017e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b42      	ldr	r3, [pc, #264]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a41      	ldr	r2, [pc, #260]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80016aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f92c 	bl	800090c <HAL_GetTick>
 80016b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f928 	bl	800090c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e10e      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ca:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d6:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80016d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016da:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <HAL_RCC_OscConfig+0x774>)
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	430a      	orrs	r2, r1
 80016ea:	4931      	ldr	r1, [pc, #196]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	3b01      	subs	r3, #1
 80016f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fe:	3b01      	subs	r3, #1
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	b29b      	uxth	r3, r3
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170a:	3b01      	subs	r3, #1
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001718:	3b01      	subs	r3, #1
 800171a:	061b      	lsls	r3, r3, #24
 800171c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001720:	4923      	ldr	r1, [pc, #140]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001722:	4313      	orrs	r3, r2
 8001724:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <HAL_RCC_OscConfig+0x778>)
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800173e:	00d2      	lsls	r2, r2, #3
 8001740:	491b      	ldr	r1, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	f023 020c 	bic.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4917      	ldr	r1, [pc, #92]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001754:	4313      	orrs	r3, r2
 8001756:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	f023 0202 	bic.w	r2, r3, #2
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001764:	4912      	ldr	r1, [pc, #72]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001766:	4313      	orrs	r3, r2
 8001768:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177a:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179a:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_RCC_OscConfig+0x76c>)
 80017a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff f8b1 	bl	800090c <HAL_GetTick>
 80017aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ac:	e011      	b.n	80017d2 <HAL_RCC_OscConfig+0x78e>
 80017ae:	bf00      	nop
 80017b0:	58024400 	.word	0x58024400
 80017b4:	58024800 	.word	0x58024800
 80017b8:	fffffc0c 	.word	0xfffffc0c
 80017bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff f8a4 	bl	800090c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e08a      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x77c>
 80017de:	e082      	b.n	80018e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b43      	ldr	r3, [pc, #268]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a42      	ldr	r2, [pc, #264]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f88e 	bl	800090c <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f88a 	bl	800090c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e070      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001806:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x7b0>
 8001812:	e068      	b.n	80018e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001814:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800181a:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	2b01      	cmp	r3, #1
 8001826:	d031      	beq.n	800188c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d12a      	bne.n	800188c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d122      	bne.n	800188c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11a      	bne.n	800188c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0a5b      	lsrs	r3, r3, #9
 800185a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001862:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001874:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d108      	bne.n	800188c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	0e1b      	lsrs	r3, r3, #24
 800187e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001886:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e02b      	b.n	80018e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 8001892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800189a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d01f      	beq.n	80018e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018aa:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b2:	f7ff f82b 	bl	800090c <HAL_GetTick>
 80018b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018b8:	bf00      	nop
 80018ba:	f7ff f827 	bl	800090c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d0f9      	beq.n	80018ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80018c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x8b0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018d2:	00d2      	lsls	r2, r2, #3
 80018d4:	4906      	ldr	r1, [pc, #24]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80018dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_RCC_OscConfig+0x8ac>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3730      	adds	r7, #48	@ 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58024400 	.word	0x58024400
 80018f4:	ffff0007 	.word	0xffff0007

080018f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e19c      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b8a      	ldr	r3, [pc, #552]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b87      	ldr	r3, [pc, #540]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 020f 	bic.w	r2, r3, #15
 8001922:	4985      	ldr	r1, [pc, #532]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b83      	ldr	r3, [pc, #524]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e184      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d010      	beq.n	800196a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001954:	429a      	cmp	r2, r3
 8001956:	d908      	bls.n	800196a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001958:	4b78      	ldr	r3, [pc, #480]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	4975      	ldr	r1, [pc, #468]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001966:	4313      	orrs	r3, r2
 8001968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	4b70      	ldr	r3, [pc, #448]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001982:	429a      	cmp	r2, r3
 8001984:	d908      	bls.n	8001998 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001986:	4b6d      	ldr	r3, [pc, #436]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	496a      	ldr	r1, [pc, #424]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001994:	4313      	orrs	r3, r2
 8001996:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d908      	bls.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019b4:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	495e      	ldr	r1, [pc, #376]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d010      	beq.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	4b59      	ldr	r3, [pc, #356]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019de:	429a      	cmp	r2, r3
 80019e0:	d908      	bls.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019e2:	4b56      	ldr	r3, [pc, #344]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4953      	ldr	r1, [pc, #332]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d010      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d908      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f023 020f 	bic.w	r2, r3, #15
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4947      	ldr	r1, [pc, #284]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d055      	beq.n	8001ada <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a2e:	4b43      	ldr	r3, [pc, #268]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4940      	ldr	r1, [pc, #256]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a48:	4b3c      	ldr	r3, [pc, #240]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d121      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0f6      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a60:	4b36      	ldr	r3, [pc, #216]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d115      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0ea      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a78:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0de      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0d6      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f023 0207 	bic.w	r2, r3, #7
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4925      	ldr	r1, [pc, #148]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aaa:	f7fe ff2f 	bl	800090c <HAL_GetTick>
 8001aae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab2:	f7fe ff2b 	bl	800090c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0be      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d1eb      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d208      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f023 020f 	bic.w	r2, r3, #15
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	490e      	ldr	r1, [pc, #56]	@ (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d214      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4906      	ldr	r1, [pc, #24]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e086      	b.n	8001c46 <HAL_RCC_ClockConfig+0x34e>
 8001b38:	52002000 	.word	0x52002000
 8001b3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	4b3f      	ldr	r3, [pc, #252]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d208      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	4939      	ldr	r1, [pc, #228]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d010      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d208      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b8a:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	492e      	ldr	r1, [pc, #184]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d208      	bcs.n	8001bca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4922      	ldr	r1, [pc, #136]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d010      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d208      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4917      	ldr	r1, [pc, #92]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bf8:	f000 f834 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	4912      	ldr	r1, [pc, #72]	@ (8001c54 <HAL_RCC_ClockConfig+0x35c>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_RCC_ClockConfig+0x358>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_RCC_ClockConfig+0x35c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_RCC_ClockConfig+0x360>)
 8001c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_RCC_ClockConfig+0x364>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_RCC_ClockConfig+0x368>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fe1c 	bl	8000878 <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
 8001c54:	08003814 	.word	0x08003814
 8001c58:	24000004 	.word	0x24000004
 8001c5c:	24000000 	.word	0x24000000
 8001c60:	24000008 	.word	0x24000008

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6a:	4bb3      	ldr	r3, [pc, #716]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c72:	2b18      	cmp	r3, #24
 8001c74:	f200 8155 	bhi.w	8001f22 <HAL_RCC_GetSysClockFreq+0x2be>
 8001c78:	a201      	add	r2, pc, #4	@ (adr r2, 8001c80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001ce5 	.word	0x08001ce5
 8001c84:	08001f23 	.word	0x08001f23
 8001c88:	08001f23 	.word	0x08001f23
 8001c8c:	08001f23 	.word	0x08001f23
 8001c90:	08001f23 	.word	0x08001f23
 8001c94:	08001f23 	.word	0x08001f23
 8001c98:	08001f23 	.word	0x08001f23
 8001c9c:	08001f23 	.word	0x08001f23
 8001ca0:	08001d0b 	.word	0x08001d0b
 8001ca4:	08001f23 	.word	0x08001f23
 8001ca8:	08001f23 	.word	0x08001f23
 8001cac:	08001f23 	.word	0x08001f23
 8001cb0:	08001f23 	.word	0x08001f23
 8001cb4:	08001f23 	.word	0x08001f23
 8001cb8:	08001f23 	.word	0x08001f23
 8001cbc:	08001f23 	.word	0x08001f23
 8001cc0:	08001d11 	.word	0x08001d11
 8001cc4:	08001f23 	.word	0x08001f23
 8001cc8:	08001f23 	.word	0x08001f23
 8001ccc:	08001f23 	.word	0x08001f23
 8001cd0:	08001f23 	.word	0x08001f23
 8001cd4:	08001f23 	.word	0x08001f23
 8001cd8:	08001f23 	.word	0x08001f23
 8001cdc:	08001f23 	.word	0x08001f23
 8001ce0:	08001d17 	.word	0x08001d17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ce4:	4b94      	ldr	r3, [pc, #592]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001cf0:	4b91      	ldr	r3, [pc, #580]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	4a90      	ldr	r2, [pc, #576]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d02:	e111      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d04:	4b8d      	ldr	r3, [pc, #564]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d06:	61bb      	str	r3, [r7, #24]
      break;
 8001d08:	e10e      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d0c:	61bb      	str	r3, [r7, #24]
      break;
 8001d0e:	e10b      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d10:	4b8c      	ldr	r3, [pc, #560]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d12:	61bb      	str	r3, [r7, #24]
      break;
 8001d14:	e108      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d20:	4b85      	ldr	r3, [pc, #532]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d2c:	4b82      	ldr	r3, [pc, #520]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d36:	4b80      	ldr	r3, [pc, #512]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80e1 	beq.w	8001f1c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f000 8083 	beq.w	8001e68 <HAL_RCC_GetSysClockFreq+0x204>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	f200 80a1 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x248>
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x114>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d056      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d76:	e099      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d78:	4b6f      	ldr	r3, [pc, #444]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d02d      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d84:	4b6c      	ldr	r3, [pc, #432]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dae:	4b62      	ldr	r3, [pc, #392]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dc2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001dde:	e087      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df2:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e22:	e065      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e36:	4b40      	ldr	r3, [pc, #256]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e66:	e043      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001f54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eaa:	e021      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ed2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	0a5b      	lsrs	r3, r3, #9
 8001ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001efa:	3301      	adds	r3, #1
 8001efc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f1a:	e005      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
      break;
 8001f20:	e002      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f24:	61bb      	str	r3, [r7, #24]
      break;
 8001f26:	bf00      	nop
  }

  return sysclockfreq;
 8001f28:	69bb      	ldr	r3, [r7, #24]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	03d09000 	.word	0x03d09000
 8001f40:	003d0900 	.word	0x003d0900
 8001f44:	017d7840 	.word	0x017d7840
 8001f48:	46000000 	.word	0x46000000
 8001f4c:	4c742400 	.word	0x4c742400
 8001f50:	4a742400 	.word	0x4a742400
 8001f54:	4bbebc20 	.word	0x4bbebc20

08001f58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b0ca      	sub	sp, #296	@ 0x128
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8001f7c:	2500      	movs	r5, #0
 8001f7e:	ea54 0305 	orrs.w	r3, r4, r5
 8001f82:	d049      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001f8e:	d02f      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001f90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001f94:	d828      	bhi.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f9a:	d01a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fa0:	d822      	bhi.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001faa:	d007      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fae:	4bb8      	ldr	r3, [pc, #736]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	4ab7      	ldr	r2, [pc, #732]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001fba:	e01a      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f9d1 	bl	800336c <RCCEx_PLL2_Config>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001fd0:	e00f      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fd6:	3328      	adds	r3, #40	@ 0x28
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 fa78 	bl	80034d0 <RCCEx_PLL3_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001fe6:	e004      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8001fee:	e000      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8001ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001ffa:	4ba5      	ldr	r3, [pc, #660]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002008:	4aa1      	ldr	r2, [pc, #644]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800200a:	430b      	orrs	r3, r1
 800200c:	6513      	str	r3, [r2, #80]	@ 0x50
 800200e:	e003      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002024:	f04f 0900 	mov.w	r9, #0
 8002028:	ea58 0309 	orrs.w	r3, r8, r9
 800202c:	d047      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800202e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	2b04      	cmp	r3, #4
 8002036:	d82a      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002038:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002055 	.word	0x08002055
 8002044:	08002063 	.word	0x08002063
 8002048:	08002079 	.word	0x08002079
 800204c:	08002097 	.word	0x08002097
 8002050:	08002097 	.word	0x08002097
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002054:	4b8e      	ldr	r3, [pc, #568]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	4a8d      	ldr	r2, [pc, #564]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800205a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002060:	e01a      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002066:	3308      	adds	r3, #8
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f001 f97e 	bl	800336c <RCCEx_PLL2_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002076:	e00f      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800207c:	3328      	adds	r3, #40	@ 0x28
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fa25 	bl	80034d0 <RCCEx_PLL3_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800208c:	e004      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002094:	e000      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a4:	f023 0107 	bic.w	r1, r3, #7
 80020a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	4a78      	ldr	r2, [pc, #480]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80020b4:	e003      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80020ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80020be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80020ca:	f04f 0b00 	mov.w	fp, #0
 80020ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80020d2:	d04c      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80020d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020de:	d030      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e4:	d829      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80020e8:	d02d      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80020ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80020ec:	d825      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020ee:	2b80      	cmp	r3, #128	@ 0x80
 80020f0:	d018      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020f2:	2b80      	cmp	r3, #128	@ 0x80
 80020f4:	d821      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80020fa:	2b40      	cmp	r3, #64	@ 0x40
 80020fc:	d007      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80020fe:	e01c      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002100:	4b63      	ldr	r3, [pc, #396]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	4a62      	ldr	r2, [pc, #392]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800210c:	e01c      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800210e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002112:	3308      	adds	r3, #8
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f001 f928 	bl	800336c <RCCEx_PLL2_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002122:	e011      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002128:	3328      	adds	r3, #40	@ 0x28
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f9cf 	bl	80034d0 <RCCEx_PLL3_Config>
 8002132:	4603      	mov	r3, r0
 8002134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002138:	e006      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002140:	e002      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002142:	bf00      	nop
 8002144:	e000      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002150:	4b4f      	ldr	r3, [pc, #316]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002154:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	4a4c      	ldr	r2, [pc, #304]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002160:	430b      	orrs	r3, r1
 8002162:	6513      	str	r3, [r2, #80]	@ 0x50
 8002164:	e003      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800216a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800216e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800217a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002184:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002188:	460b      	mov	r3, r1
 800218a:	4313      	orrs	r3, r2
 800218c:	d053      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800218e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002196:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800219a:	d035      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800219c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021a0:	d82e      	bhi.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80021a6:	d031      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80021a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80021ac:	d828      	bhi.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021b2:	d01a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80021b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021b8:	d822      	bhi.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80021be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021c2:	d007      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80021c4:	e01c      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021c6:	4b32      	ldr	r3, [pc, #200]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a31      	ldr	r2, [pc, #196]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021d2:	e01c      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021d8:	3308      	adds	r3, #8
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 f8c5 	bl	800336c <RCCEx_PLL2_Config>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80021e8:	e011      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021ee:	3328      	adds	r3, #40	@ 0x28
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 f96c 	bl	80034d0 <RCCEx_PLL3_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021fe:	e006      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002206:	e002      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002208:	bf00      	nop
 800220a:	e000      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800220c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800220e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800221e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002226:	4a1a      	ldr	r2, [pc, #104]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002228:	430b      	orrs	r3, r1
 800222a:	6593      	str	r3, [r2, #88]	@ 0x58
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002242:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800224c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002250:	460b      	mov	r3, r1
 8002252:	4313      	orrs	r3, r2
 8002254:	d056      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800225a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800225e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002262:	d038      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002268:	d831      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800226a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800226e:	d034      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002270:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002274:	d82b      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800227a:	d01d      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800227c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002280:	d825      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800228c:	e01f      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800228e:	bf00      	nop
 8002290:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002294:	4ba2      	ldr	r3, [pc, #648]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	4aa1      	ldr	r2, [pc, #644]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022a0:	e01c      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022a6:	3308      	adds	r3, #8
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 f85e 	bl	800336c <RCCEx_PLL2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80022b6:	e011      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022bc:	3328      	adds	r3, #40	@ 0x28
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 f905 	bl	80034d0 <RCCEx_PLL3_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022cc:	e006      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022d4:	e002      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80022da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80022e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80022ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80022f4:	4a8a      	ldr	r2, [pc, #552]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fa:	e003      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002310:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800231a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800231e:	460b      	mov	r3, r1
 8002320:	4313      	orrs	r3, r2
 8002322:	d03a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	2b30      	cmp	r3, #48	@ 0x30
 800232c:	d01f      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800232e:	2b30      	cmp	r3, #48	@ 0x30
 8002330:	d819      	bhi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002332:	2b20      	cmp	r3, #32
 8002334:	d00c      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002336:	2b20      	cmp	r3, #32
 8002338:	d815      	bhi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800233e:	2b10      	cmp	r3, #16
 8002340:	d111      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002342:	4b77      	ldr	r3, [pc, #476]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	4a76      	ldr	r2, [pc, #472]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800234c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800234e:	e011      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002354:	3308      	adds	r3, #8
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f807 	bl	800336c <RCCEx_PLL2_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002364:	e006      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800236c:	e002      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800236e:	bf00      	nop
 8002370:	e000      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800237c:	4b68      	ldr	r3, [pc, #416]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002380:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	4a65      	ldr	r2, [pc, #404]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800238c:	430b      	orrs	r3, r1
 800238e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800239a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80023a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80023b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4313      	orrs	r3, r2
 80023b8:	d051      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80023ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023c4:	d035      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80023c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023ca:	d82e      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80023cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023d0:	d031      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80023d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023d6:	d828      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80023d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023dc:	d01a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80023de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023e2:	d822      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ec:	d007      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80023ee:	e01c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023fc:	e01c      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002402:	3308      	adds	r3, #8
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f000 ffb0 	bl	800336c <RCCEx_PLL2_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002418:	3328      	adds	r3, #40	@ 0x28
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f001 f857 	bl	80034d0 <RCCEx_PLL3_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002428:	e006      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002430:	e002      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002440:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002444:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800244c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244e:	4a34      	ldr	r2, [pc, #208]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002450:	430b      	orrs	r3, r1
 8002452:	6513      	str	r3, [r2, #80]	@ 0x50
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800245a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800245e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800246a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002474:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002478:	460b      	mov	r3, r1
 800247a:	4313      	orrs	r3, r2
 800247c:	d056      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800247e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002488:	d033      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800248a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248e:	d82c      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002494:	d02f      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002496:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800249a:	d826      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800249c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024a0:	d02b      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80024a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024a6:	d820      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024ac:	d012      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80024ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024b2:	d81a      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d022      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024bc:	d115      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80024be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024c2:	3308      	adds	r3, #8
 80024c4:	2101      	movs	r1, #1
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 ff50 	bl	800336c <RCCEx_PLL2_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80024d2:	e015      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80024d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024d8:	3328      	adds	r3, #40	@ 0x28
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fff7 	bl	80034d0 <RCCEx_PLL3_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80024e8:	e00a      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024f0:	e006      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024f2:	bf00      	nop
 80024f4:	e004      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024f6:	bf00      	nop
 80024f8:	e002      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002514:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002516:	4a02      	ldr	r2, [pc, #8]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002518:	430b      	orrs	r3, r1
 800251a:	6513      	str	r3, [r2, #80]	@ 0x50
 800251c:	e006      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800252c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002542:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002546:	460b      	mov	r3, r1
 8002548:	4313      	orrs	r3, r2
 800254a:	d055      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800254c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002558:	d033      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800255a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800255e:	d82c      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002564:	d02f      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800256a:	d826      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800256c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002570:	d02b      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002576:	d820      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800257c:	d012      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800257e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002582:	d81a      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d022      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800258c:	d115      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800258e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002592:	3308      	adds	r3, #8
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fee8 	bl	800336c <RCCEx_PLL2_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80025a2:	e015      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80025a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025a8:	3328      	adds	r3, #40	@ 0x28
 80025aa:	2101      	movs	r1, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 ff8f 	bl	80034d0 <RCCEx_PLL3_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80025b8:	e00a      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025c2:	bf00      	nop
 80025c4:	e004      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025c6:	bf00      	nop
 80025c8:	e002      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80025d8:	4ba3      	ldr	r3, [pc, #652]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80025e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80025e8:	4a9f      	ldr	r2, [pc, #636]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025ea:	430b      	orrs	r3, r1
 80025ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ee:	e003      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800260e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002612:	460b      	mov	r3, r1
 8002614:	4313      	orrs	r3, r2
 8002616:	d037      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002622:	d00e      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002628:	d816      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800262e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002632:	d111      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002634:	4b8c      	ldr	r3, [pc, #560]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	4a8b      	ldr	r2, [pc, #556]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800263a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002640:	e00f      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002646:	3308      	adds	r3, #8
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fe8e 	bl	800336c <RCCEx_PLL2_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002656:	e004      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800265e:	e000      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800266a:	4b7f      	ldr	r3, [pc, #508]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a7b      	ldr	r2, [pc, #492]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800267a:	430b      	orrs	r3, r1
 800267c:	6513      	str	r3, [r2, #80]	@ 0x50
 800267e:	e003      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800269e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4313      	orrs	r3, r2
 80026a6:	d039      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80026a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d81c      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80026b2:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026f5 	.word	0x080026f5
 80026bc:	080026c9 	.word	0x080026c9
 80026c0:	080026d7 	.word	0x080026d7
 80026c4:	080026f5 	.word	0x080026f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c8:	4b67      	ldr	r3, [pc, #412]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	4a66      	ldr	r2, [pc, #408]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80026d4:	e00f      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026da:	3308      	adds	r3, #8
 80026dc:	2102      	movs	r1, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fe44 	bl	800336c <RCCEx_PLL2_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80026ea:	e004      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026f2:	e000      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80026f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80026fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	f023 0103 	bic.w	r1, r3, #3
 8002706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270c:	4a56      	ldr	r2, [pc, #344]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800270e:	430b      	orrs	r3, r1
 8002710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002712:	e003      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002728:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002732:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002736:	460b      	mov	r3, r1
 8002738:	4313      	orrs	r3, r2
 800273a:	f000 809f 	beq.w	800287c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273e:	4b4b      	ldr	r3, [pc, #300]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a4a      	ldr	r2, [pc, #296]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274a:	f7fe f8df 	bl	800090c <HAL_GetTick>
 800274e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002752:	e00b      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe f8da 	bl	800090c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	@ 0x64
 8002762:	d903      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800276c:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ed      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800277c:	2b00      	cmp	r3, #0
 800277e:	d179      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002780:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002782:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800278c:	4053      	eors	r3, r2
 800278e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002792:	2b00      	cmp	r3, #0
 8002794:	d015      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002796:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a2:	4b31      	ldr	r3, [pc, #196]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a30      	ldr	r2, [pc, #192]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80027ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80027c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ce:	d118      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe f89c 	bl	800090c <HAL_GetTick>
 80027d4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d8:	e00d      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe f897 	bl	800090c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027e4:	1ad2      	subs	r2, r2, r3
 80027e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d903      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80027f4:	e005      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0eb      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002806:	2b00      	cmp	r3, #0
 8002808:	d129      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800280e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800281a:	d10e      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800281c:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002828:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800282c:	091a      	lsrs	r2, r3, #4
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002830:	4013      	ands	r3, r2
 8002832:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002834:	430b      	orrs	r3, r1
 8002836:	6113      	str	r3, [r2, #16]
 8002838:	e005      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002840:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002844:	6113      	str	r3, [r2, #16]
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002848:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800284a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800284e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	4a04      	ldr	r2, [pc, #16]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002858:	430b      	orrs	r3, r1
 800285a:	6713      	str	r3, [r2, #112]	@ 0x70
 800285c:	e00e      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800285e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002868:	58024400 	.word	0x58024400
 800286c:	58024800 	.word	0x58024800
 8002870:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800287c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f002 0301 	and.w	r3, r2, #1
 8002888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002892:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002896:	460b      	mov	r3, r1
 8002898:	4313      	orrs	r3, r2
 800289a:	f000 8089 	beq.w	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028a4:	2b28      	cmp	r3, #40	@ 0x28
 80028a6:	d86b      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80028a8:	a201      	add	r2, pc, #4	@ (adr r2, 80028b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	08002989 	.word	0x08002989
 80028b4:	08002981 	.word	0x08002981
 80028b8:	08002981 	.word	0x08002981
 80028bc:	08002981 	.word	0x08002981
 80028c0:	08002981 	.word	0x08002981
 80028c4:	08002981 	.word	0x08002981
 80028c8:	08002981 	.word	0x08002981
 80028cc:	08002981 	.word	0x08002981
 80028d0:	08002955 	.word	0x08002955
 80028d4:	08002981 	.word	0x08002981
 80028d8:	08002981 	.word	0x08002981
 80028dc:	08002981 	.word	0x08002981
 80028e0:	08002981 	.word	0x08002981
 80028e4:	08002981 	.word	0x08002981
 80028e8:	08002981 	.word	0x08002981
 80028ec:	08002981 	.word	0x08002981
 80028f0:	0800296b 	.word	0x0800296b
 80028f4:	08002981 	.word	0x08002981
 80028f8:	08002981 	.word	0x08002981
 80028fc:	08002981 	.word	0x08002981
 8002900:	08002981 	.word	0x08002981
 8002904:	08002981 	.word	0x08002981
 8002908:	08002981 	.word	0x08002981
 800290c:	08002981 	.word	0x08002981
 8002910:	08002989 	.word	0x08002989
 8002914:	08002981 	.word	0x08002981
 8002918:	08002981 	.word	0x08002981
 800291c:	08002981 	.word	0x08002981
 8002920:	08002981 	.word	0x08002981
 8002924:	08002981 	.word	0x08002981
 8002928:	08002981 	.word	0x08002981
 800292c:	08002981 	.word	0x08002981
 8002930:	08002989 	.word	0x08002989
 8002934:	08002981 	.word	0x08002981
 8002938:	08002981 	.word	0x08002981
 800293c:	08002981 	.word	0x08002981
 8002940:	08002981 	.word	0x08002981
 8002944:	08002981 	.word	0x08002981
 8002948:	08002981 	.word	0x08002981
 800294c:	08002981 	.word	0x08002981
 8002950:	08002989 	.word	0x08002989
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002958:	3308      	adds	r3, #8
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fd05 	bl	800336c <RCCEx_PLL2_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002968:	e00f      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296e:	3328      	adds	r3, #40	@ 0x28
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fdac 	bl	80034d0 <RCCEx_PLL3_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800297e:	e004      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002986:	e000      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800298a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002992:	4bbf      	ldr	r3, [pc, #764]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800299a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a0:	4abb      	ldr	r2, [pc, #748]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029a2:	430b      	orrs	r3, r1
 80029a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80029a6:	e003      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80029b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f002 0302 	and.w	r3, r2, #2
 80029bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80029ca:	460b      	mov	r3, r1
 80029cc:	4313      	orrs	r3, r2
 80029ce:	d041      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d824      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80029da:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a2d 	.word	0x08002a2d
 80029e4:	080029f9 	.word	0x080029f9
 80029e8:	08002a0f 	.word	0x08002a0f
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a2d 	.word	0x08002a2d
 80029f4:	08002a2d 	.word	0x08002a2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fc:	3308      	adds	r3, #8
 80029fe:	2101      	movs	r1, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fcb3 	bl	800336c <RCCEx_PLL2_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a0c:	e00f      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a12:	3328      	adds	r3, #40	@ 0x28
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fd5a 	bl	80034d0 <RCCEx_PLL3_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a22:	e004      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a36:	4b96      	ldr	r3, [pc, #600]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f023 0107 	bic.w	r1, r3, #7
 8002a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a44:	4a92      	ldr	r2, [pc, #584]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a4a:	e003      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f002 0304 	and.w	r3, r2, #4
 8002a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4313      	orrs	r3, r2
 8002a72:	d044      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d825      	bhi.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002a80:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002ad5 	.word	0x08002ad5
 8002a8c:	08002aa1 	.word	0x08002aa1
 8002a90:	08002ab7 	.word	0x08002ab7
 8002a94:	08002ad5 	.word	0x08002ad5
 8002a98:	08002ad5 	.word	0x08002ad5
 8002a9c:	08002ad5 	.word	0x08002ad5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fc5f 	bl	800336c <RCCEx_PLL2_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ab4:	e00f      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	3328      	adds	r3, #40	@ 0x28
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd06 	bl	80034d0 <RCCEx_PLL3_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002aca:	e004      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ade:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	f023 0107 	bic.w	r1, r3, #7
 8002ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aee:	4a68      	ldr	r2, [pc, #416]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af4:	e003      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f002 0320 	and.w	r3, r2, #32
 8002b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	d055      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b2a:	d033      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b30:	d82c      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b36:	d02f      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d826      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b42:	d02b      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002b44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b48:	d820      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b4e:	d012      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b54:	d81a      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d022      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b5e:	d115      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b64:	3308      	adds	r3, #8
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fbff 	bl	800336c <RCCEx_PLL2_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b74:	e015      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7a:	3328      	adds	r3, #40	@ 0x28
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fca6 	bl	80034d0 <RCCEx_PLL3_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b92:	e006      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b94:	bf00      	nop
 8002b96:	e004      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b98:	bf00      	nop
 8002b9a:	e002      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b9c:	bf00      	nop
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	4a35      	ldr	r2, [pc, #212]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6553      	str	r3, [r2, #84]	@ 0x54
 8002bc0:	e003      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002be0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4313      	orrs	r3, r2
 8002be8:	d058      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bf2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002bf6:	d033      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002bf8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002bfc:	d82c      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c02:	d02f      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c08:	d826      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c0e:	d02b      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c14:	d820      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c1a:	d012      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c20:	d81a      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d022      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c30:	3308      	adds	r3, #8
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fb99 	bl	800336c <RCCEx_PLL2_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c40:	e015      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c46:	3328      	adds	r3, #40	@ 0x28
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fc40 	bl	80034d0 <RCCEx_PLL3_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c56:	e00a      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c5e:	e006      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c60:	bf00      	nop
 8002c62:	e004      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c64:	bf00      	nop
 8002c66:	e002      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c68:	bf00      	nop
 8002c6a:	e000      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10e      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c86:	4a02      	ldr	r2, [pc, #8]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8c:	e006      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002c8e:	bf00      	nop
 8002c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	d055      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002cc4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002cc8:	d033      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002cca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002cce:	d82c      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd4:	d02f      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cda:	d826      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002cdc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002ce0:	d02b      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002ce2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002ce6:	d820      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cec:	d012      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf2:	d81a      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d022      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d02:	3308      	adds	r3, #8
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fb30 	bl	800336c <RCCEx_PLL2_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d12:	e015      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d18:	3328      	adds	r3, #40	@ 0x28
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fbd7 	bl	80034d0 <RCCEx_PLL3_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d28:	e00a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d32:	bf00      	nop
 8002d34:	e004      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d48:	4ba1      	ldr	r3, [pc, #644]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d58:	4a9d      	ldr	r2, [pc, #628]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d5e:	e003      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f002 0308 	and.w	r3, r2, #8
 8002d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002d82:	460b      	mov	r3, r1
 8002d84:	4313      	orrs	r3, r2
 8002d86:	d01e      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9a:	3328      	adds	r3, #40	@ 0x28
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb96 	bl	80034d0 <RCCEx_PLL3_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002db0:	4b87      	ldr	r3, [pc, #540]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc0:	4a83      	ldr	r2, [pc, #524]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f002 0310 	and.w	r3, r2, #16
 8002dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ddc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002de0:	460b      	mov	r3, r1
 8002de2:	4313      	orrs	r3, r2
 8002de4:	d01e      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	3328      	adds	r3, #40	@ 0x28
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fb67 	bl	80034d0 <RCCEx_PLL3_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e0e:	4b70      	ldr	r3, [pc, #448]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e1e:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4313      	orrs	r3, r2
 8002e42:	d03e      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e50:	d022      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002e52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e56:	d81b      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002e62:	e015      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e68:	3308      	adds	r3, #8
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fa7d 	bl	800336c <RCCEx_PLL2_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002e78:	e00f      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7e:	3328      	adds	r3, #40	@ 0x28
 8002e80:	2102      	movs	r1, #2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fb24 	bl	80034d0 <RCCEx_PLL3_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eb2:	4a47      	ldr	r2, [pc, #284]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb8:	e003      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002ece:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ed4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4313      	orrs	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002eea:	d01f      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002eec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ef0:	d818      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002efc:	d007      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002efe:	e011      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f00:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f0c:	e00f      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f12:	3328      	adds	r3, #40	@ 0x28
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fada 	bl	80034d0 <RCCEx_PLL3_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f22:	e004      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f36:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002f62:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f64:	2300      	movs	r3, #0
 8002f66:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	d034      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f80:	d007      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8002f82:	e011      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f84:	4b12      	ldr	r3, [pc, #72]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	4a11      	ldr	r2, [pc, #68]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002f90:	e00e      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f96:	3308      	adds	r3, #8
 8002f98:	2102      	movs	r1, #2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f9e6 	bl	800336c <RCCEx_PLL2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc6:	4a02      	ldr	r2, [pc, #8]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8002fce:	bf00      	nop
 8002fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fea:	2300      	movs	r3, #0
 8002fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	d00c      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffc:	3328      	adds	r3, #40	@ 0x28
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fa65 	bl	80034d0 <RCCEx_PLL3_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800301e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003020:	2300      	movs	r3, #0
 8003022:	667b      	str	r3, [r7, #100]	@ 0x64
 8003024:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003028:	460b      	mov	r3, r1
 800302a:	4313      	orrs	r3, r2
 800302c:	d038      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800303a:	d018      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800303c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003040:	d811      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003046:	d014      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800304c:	d80b      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d011      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003056:	d106      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003058:	4bc3      	ldr	r3, [pc, #780]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	4ac2      	ldr	r2, [pc, #776]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800305e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003064:	e008      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800306c:	e004      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003080:	4bb9      	ldr	r3, [pc, #740]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003090:	4ab5      	ldr	r2, [pc, #724]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003092:	430b      	orrs	r3, r1
 8003094:	6553      	str	r3, [r2, #84]	@ 0x54
 8003096:	e003      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800309c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80030ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030ae:	2300      	movs	r3, #0
 80030b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80030b6:	460b      	mov	r3, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030bc:	4baa      	ldr	r3, [pc, #680]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ca:	4aa7      	ldr	r2, [pc, #668]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80030d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80030dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80030de:	2300      	movs	r3, #0
 80030e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80030e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80030ec:	4b9e      	ldr	r3, [pc, #632]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80030fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030fe:	430b      	orrs	r3, r1
 8003100:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800310e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003110:	2300      	movs	r3, #0
 8003112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003114:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800311e:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003122:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312c:	4a8e      	ldr	r2, [pc, #568]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800312e:	430b      	orrs	r3, r1
 8003130:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800313e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003140:	2300      	movs	r3, #0
 8003142:	647b      	str	r3, [r7, #68]	@ 0x44
 8003144:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003148:	460b      	mov	r3, r1
 800314a:	4313      	orrs	r3, r2
 800314c:	d00e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800314e:	4b86      	ldr	r3, [pc, #536]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	4a85      	ldr	r2, [pc, #532]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003154:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003158:	6113      	str	r3, [r2, #16]
 800315a:	4b83      	ldr	r3, [pc, #524]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003166:	4a80      	ldr	r2, [pc, #512]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003168:	430b      	orrs	r3, r1
 800316a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800316c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800317a:	2300      	movs	r3, #0
 800317c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800317e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d009      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003188:	4b77      	ldr	r3, [pc, #476]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	4a74      	ldr	r2, [pc, #464]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003198:	430b      	orrs	r3, r1
 800319a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80031a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031aa:	2300      	movs	r3, #0
 80031ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80031b2:	460b      	mov	r3, r1
 80031b4:	4313      	orrs	r3, r2
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c8:	4a67      	ldr	r2, [pc, #412]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	2100      	movs	r1, #0
 80031d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80031e4:	460b      	mov	r3, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d011      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ee:	3308      	adds	r3, #8
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f8ba 	bl	800336c <RCCEx_PLL2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80031fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800320e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	2100      	movs	r1, #0
 8003218:	6239      	str	r1, [r7, #32]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003220:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003224:	460b      	mov	r3, r1
 8003226:	4313      	orrs	r3, r2
 8003228:	d011      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322e:	3308      	adds	r3, #8
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f89a 	bl	800336c <RCCEx_PLL2_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800323e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800324a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	2100      	movs	r1, #0
 8003258:	61b9      	str	r1, [r7, #24]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d011      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	3308      	adds	r3, #8
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f87a 	bl	800336c <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	2100      	movs	r1, #0
 8003298:	6139      	str	r1, [r7, #16]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032a4:	460b      	mov	r3, r1
 80032a6:	4313      	orrs	r3, r2
 80032a8:	d011      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ae:	3328      	adds	r3, #40	@ 0x28
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f90c 	bl	80034d0 <RCCEx_PLL3_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80032be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80032ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	2100      	movs	r1, #0
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d011      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ee:	3328      	adds	r3, #40	@ 0x28
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f8ec 	bl	80034d0 <RCCEx_PLL3_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80032fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800330a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	2100      	movs	r1, #0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003324:	460b      	mov	r3, r1
 8003326:	4313      	orrs	r3, r2
 8003328:	d011      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332e:	3328      	adds	r3, #40	@ 0x28
 8003330:	2102      	movs	r1, #2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f8cc 	bl	80034d0 <RCCEx_PLL3_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800333e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800334e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003362:	46bd      	mov	sp, r7
 8003364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003368:	58024400 	.word	0x58024400

0800336c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800337a:	4b53      	ldr	r3, [pc, #332]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d101      	bne.n	800338a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e099      	b.n	80034be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800338a:	4b4f      	ldr	r3, [pc, #316]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4e      	ldr	r2, [pc, #312]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003390:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003396:	f7fd fab9 	bl	800090c <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800339c:	e008      	b.n	80033b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800339e:	f7fd fab5 	bl	800090c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e086      	b.n	80034be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033b0:	4b45      	ldr	r3, [pc, #276]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80033bc:	4b42      	ldr	r3, [pc, #264]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	493f      	ldr	r1, [pc, #252]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	3b01      	subs	r3, #1
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003400:	4931      	ldr	r1, [pc, #196]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003406:	4b30      	ldr	r3, [pc, #192]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	492d      	ldr	r1, [pc, #180]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003418:	4b2b      	ldr	r3, [pc, #172]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	f023 0220 	bic.w	r2, r3, #32
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4928      	ldr	r1, [pc, #160]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800342a:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	4a26      	ldr	r2, [pc, #152]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003436:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800343a:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <RCCEx_PLL2_Config+0x160>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	69d2      	ldr	r2, [r2, #28]
 8003442:	00d2      	lsls	r2, r2, #3
 8003444:	4920      	ldr	r1, [pc, #128]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800344a:	4b1f      	ldr	r3, [pc, #124]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800345c:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003462:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003466:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003468:	e00f      	b.n	800348a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003470:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800347a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800347c:	e005      	b.n	800348a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003488:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003496:	f7fd fa39 	bl	800090c <HAL_GetTick>
 800349a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800349c:	e008      	b.n	80034b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800349e:	f7fd fa35 	bl	800090c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e006      	b.n	80034be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034b0:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	ffff0007 	.word	0xffff0007

080034d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034de:	4b53      	ldr	r3, [pc, #332]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d101      	bne.n	80034ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e099      	b.n	8003622 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80034ee:	4b4f      	ldr	r3, [pc, #316]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4e      	ldr	r2, [pc, #312]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fd fa07 	bl	800090c <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003500:	e008      	b.n	8003514 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003502:	f7fd fa03 	bl	800090c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e086      	b.n	8003622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003514:	4b45      	ldr	r3, [pc, #276]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003520:	4b42      	ldr	r3, [pc, #264]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	051b      	lsls	r3, r3, #20
 800352e:	493f      	ldr	r1, [pc, #252]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	628b      	str	r3, [r1, #40]	@ 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	3b01      	subs	r3, #1
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	b29b      	uxth	r3, r3
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	3b01      	subs	r3, #1
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003564:	4931      	ldr	r1, [pc, #196]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800356a:	4b30      	ldr	r3, [pc, #192]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	492d      	ldr	r1, [pc, #180]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800357c:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4928      	ldr	r1, [pc, #160]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800358e:	4b27      	ldr	r3, [pc, #156]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	4a26      	ldr	r2, [pc, #152]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003598:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 800359c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <RCCEx_PLL3_Config+0x160>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	69d2      	ldr	r2, [r2, #28]
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	4920      	ldr	r1, [pc, #128]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80035ae:	4b1f      	ldr	r3, [pc, #124]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	4a19      	ldr	r2, [pc, #100]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035cc:	e00f      	b.n	80035ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80035d4:	4b15      	ldr	r3, [pc, #84]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035e0:	e005      	b.n	80035ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80035e2:	4b12      	ldr	r3, [pc, #72]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	4a11      	ldr	r2, [pc, #68]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80035ee:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a0e      	ldr	r2, [pc, #56]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fa:	f7fd f987 	bl	800090c <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003600:	e008      	b.n	8003614 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003602:	f7fd f983 	bl	800090c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e006      	b.n	8003622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <RCCEx_PLL3_Config+0x15c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400
 8003630:	ffff0007 	.word	0xffff0007

08003634 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e054      	b.n	80036f0 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7a5b      	ldrb	r3, [r3, #9]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fc ff84 	bl	8000564 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0120 	bic.w	r1, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0204 	orr.w	r2, r2, #4
 8003686:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d104      	bne.n	80036a0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2204      	movs	r2, #4
 800369a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e027      	b.n	80036f0 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80036a0:	f7fd f934 	bl	800090c <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80036a6:	e015      	b.n	80036d4 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80036a8:	f7fd f930 	bl	800090c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d90e      	bls.n	80036d4 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d007      	beq.n	80036d4 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2204      	movs	r2, #4
 80036c8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e00d      	b.n	80036f0 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d1e2      	bne.n	80036a8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7a1b      	ldrb	r3, [r3, #8]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_RNG_GenerateRandomNumber+0x1a>
 800370e:	2302      	movs	r3, #2
 8003710:	e044      	b.n	800379c <HAL_RNG_GenerateRandomNumber+0xa4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7a5b      	ldrb	r3, [r3, #9]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d133      	bne.n	800378a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8003728:	f7fd f8f0 	bl	800090c <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800372e:	e018      	b.n	8003762 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003730:	f7fd f8ec 	bl	800090c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d911      	bls.n	8003762 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d00a      	beq.n	8003762 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e01c      	b.n	800379c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d1df      	bne.n	8003730 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	725a      	strb	r2, [r3, #9]
 8003788:	e004      	b.n	8003794 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	721a      	strb	r2, [r3, #8]

  return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <memset>:
 80037a4:	4402      	add	r2, r0
 80037a6:	4603      	mov	r3, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d100      	bne.n	80037ae <memset+0xa>
 80037ac:	4770      	bx	lr
 80037ae:	f803 1b01 	strb.w	r1, [r3], #1
 80037b2:	e7f9      	b.n	80037a8 <memset+0x4>

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4d0d      	ldr	r5, [pc, #52]	@ (80037ec <__libc_init_array+0x38>)
 80037b8:	4c0d      	ldr	r4, [pc, #52]	@ (80037f0 <__libc_init_array+0x3c>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	2600      	movs	r6, #0
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	4d0b      	ldr	r5, [pc, #44]	@ (80037f4 <__libc_init_array+0x40>)
 80037c6:	4c0c      	ldr	r4, [pc, #48]	@ (80037f8 <__libc_init_array+0x44>)
 80037c8:	f000 f818 	bl	80037fc <_init>
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	2600      	movs	r6, #0
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08003824 	.word	0x08003824
 80037f0:	08003824 	.word	0x08003824
 80037f4:	08003824 	.word	0x08003824
 80037f8:	08003828 	.word	0x08003828

080037fc <_init>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr

08003808 <_fini>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr
