
stm32h750vbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800384c  0800384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003850  08003850  00004850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08003854  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  24000010  08003864  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000048  08003864  00005048  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008de3  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001791  00000000  00000000  0000de21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000007a0  00000000  00000000  0000f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000005a2  00000000  00000000  0000fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000353f8  00000000  00000000  000102fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000095c7  00000000  00000000  000456f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00151933  00000000  00000000  0004ecb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a05ec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d68  00000000  00000000  001a0630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  001a2398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003824 	.word	0x08003824

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003824 	.word	0x08003824

080002d8 <main>:
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_RNG_Init(void);

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	MPU_Config();
 80002dc:	f000 f90a 	bl	80004f4 <MPU_Config>
	HAL_Init();
 80002e0:	f000 faa2 	bl	8000828 <HAL_Init>
	SystemClock_Config();
 80002e4:	f000 f828 	bl	8000338 <SystemClock_Config>
	MX_GPIO_Init();
 80002e8:	f000 f8a8 	bl	800043c <MX_GPIO_Init>
	MX_RNG_Init();
 80002ec:	f000 f890 	bl	8000410 <MX_RNG_Init>

	while (1)
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber) == HAL_OK)
 80002f0:	490d      	ldr	r1, [pc, #52]	@ (8000328 <main+0x50>)
 80002f2:	480e      	ldr	r0, [pc, #56]	@ (800032c <main+0x54>)
 80002f4:	f003 fa14 	bl	8003720 <HAL_RNG_GenerateRandomNumber>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d10a      	bne.n	8000314 <main+0x3c>
		{
			HAL_GPIO_WritePin(LED_1_PIN_GPIO_Port, LED_1_PIN_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000304:	480a      	ldr	r0, [pc, #40]	@ (8000330 <main+0x58>)
 8000306:	f000 fe5d 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800030a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800030e:	f000 fb1d 	bl	800094c <HAL_Delay>
 8000312:	e7ed      	b.n	80002f0 <main+0x18>
		}
		else
		{
			HAL_GPIO_WritePin(LED_2_PIN_GPIO_Port, LED_2_PIN_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2120      	movs	r1, #32
 8000318:	4806      	ldr	r0, [pc, #24]	@ (8000334 <main+0x5c>)
 800031a:	f000 fe53 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800031e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000322:	f000 fb13 	bl	800094c <HAL_Delay>
		if (HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber) == HAL_OK)
 8000326:	e7e3      	b.n	80002f0 <main+0x18>
 8000328:	24000040 	.word	0x24000040
 800032c:	2400002c 	.word	0x2400002c
 8000330:	58020800 	.word	0x58020800
 8000334:	58020000 	.word	0x58020000

08000338 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b09c      	sub	sp, #112	@ 0x70
 800033c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000342:	224c      	movs	r2, #76	@ 0x4c
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fa40 	bl	80037cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2220      	movs	r2, #32
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fa3a 	bl	80037cc <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000358:	2002      	movs	r0, #2
 800035a:	f000 fe4d 	bl	8000ff8 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <SystemClock_Config+0xd0>)
 8000364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000366:	4a28      	ldr	r2, [pc, #160]	@ (8000408 <SystemClock_Config+0xd0>)
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800036e:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <SystemClock_Config+0xd0>)
 8000370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemClock_Config+0xd4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000380:	4a22      	ldr	r2, [pc, #136]	@ (800040c <SystemClock_Config+0xd4>)
 8000382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemClock_Config+0xd4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000394:	bf00      	nop
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <SystemClock_Config+0xd4>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800039e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003a2:	d1f8      	bne.n	8000396 <SystemClock_Config+0x5e>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80003a4:	2322      	movs	r3, #34	@ 0x22
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2340      	movs	r3, #64	@ 0x40
 80003ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fe55 	bl	800106c <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80003c8:	f000 f8c0 	bl	800054c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	233f      	movs	r3, #63	@ 0x3f
 80003ce:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2101      	movs	r1, #1
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 fa95 	bl	8001920 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 80003fc:	f000 f8a6 	bl	800054c <Error_Handler>
	}
}
 8000400:	bf00      	nop
 8000402:	3770      	adds	r7, #112	@ 0x70
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	58000400 	.word	0x58000400
 800040c:	58024800 	.word	0x58024800

08000410 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8000414:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <MX_RNG_Init+0x24>)
 8000416:	4a08      	ldr	r2, [pc, #32]	@ (8000438 <MX_RNG_Init+0x28>)
 8000418:	601a      	str	r2, [r3, #0]
	hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_RNG_Init+0x24>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000420:	4804      	ldr	r0, [pc, #16]	@ (8000434 <MX_RNG_Init+0x24>)
 8000422:	f003 f91b 	bl	800365c <HAL_RNG_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_RNG_Init+0x20>
	{
		Error_Handler();
 800042c:	f000 f88e 	bl	800054c <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2400002c 	.word	0x2400002c
 8000438:	48021800 	.word	0x48021800

0800043c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000452:	4b25      	ldr	r3, [pc, #148]	@ (80004e8 <MX_GPIO_Init+0xac>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000458:	4a23      	ldr	r2, [pc, #140]	@ (80004e8 <MX_GPIO_Init+0xac>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000462:	4b21      	ldr	r3, [pc, #132]	@ (80004e8 <MX_GPIO_Init+0xac>)
 8000464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_GPIO_Init+0xac>)
 8000472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <MX_GPIO_Init+0xac>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000480:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <MX_GPIO_Init+0xac>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_PIN_GPIO_Port, LED_1_PIN_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000494:	4815      	ldr	r0, [pc, #84]	@ (80004ec <MX_GPIO_Init+0xb0>)
 8000496:	f000 fd95 	bl	8000fc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_2_PIN_GPIO_Port, LED_2_PIN_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	4814      	ldr	r0, [pc, #80]	@ (80004f0 <MX_GPIO_Init+0xb4>)
 80004a0:	f000 fd90 	bl	8000fc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_1_PIN_Pin */
	GPIO_InitStruct.Pin = LED_1_PIN_Pin;
 80004a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_1_PIN_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	4619      	mov	r1, r3
 80004bc:	480b      	ldr	r0, [pc, #44]	@ (80004ec <MX_GPIO_Init+0xb0>)
 80004be:	f000 fbd1 	bl	8000c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_2_PIN_Pin */
	GPIO_InitStruct.Pin = LED_2_PIN_Pin;
 80004c2:	2320      	movs	r3, #32
 80004c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_2_PIN_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_GPIO_Init+0xb4>)
 80004da:	f000 fbc3 	bl	8000c64 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	58024400 	.word	0x58024400
 80004ec:	58020800 	.word	0x58020800
 80004f0:	58020000 	.word	0x58020000

080004f4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000506:	f000 fb35 	bl	8000b74 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800050a:	2301      	movs	r3, #1
 800050c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800050e:	2300      	movs	r3, #0
 8000510:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000516:	231f      	movs	r3, #31
 8000518:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800051a:	2387      	movs	r3, #135	@ 0x87
 800051c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800051e:	2300      	movs	r3, #0
 8000520:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000522:	2300      	movs	r3, #0
 8000524:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000526:	2301      	movs	r3, #1
 8000528:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800052a:	2301      	movs	r3, #1
 800052c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000536:	463b      	mov	r3, r7
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fb53 	bl	8000be4 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800053e:	2004      	movs	r0, #4
 8000540:	f000 fb30 	bl	8000ba4 <HAL_MPU_Enable>

}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <Error_Handler+0x8>

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <HAL_MspInit+0x30>)
 8000560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000564:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <HAL_MspInit+0x30>)
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <HAL_MspInit+0x30>)
 8000570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	58024400 	.word	0x58024400

0800058c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b4      	sub	sp, #208	@ 0xd0
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	22c0      	movs	r2, #192	@ 0xc0
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f003 f915 	bl	80037cc <memset>
  if(hrng->Instance==RNG)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a14      	ldr	r2, [pc, #80]	@ (80005f8 <HAL_RNG_MspInit+0x6c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d121      	bne.n	80005f0 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80005ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005b0:	f04f 0300 	mov.w	r3, #0
 80005b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fcdc 	bl	8001f80 <HAL_RCCEx_PeriphCLKConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80005ce:	f7ff ffbd 	bl	800054c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <HAL_RNG_MspInit+0x70>)
 80005d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80005d8:	4a08      	ldr	r2, [pc, #32]	@ (80005fc <HAL_RNG_MspInit+0x70>)
 80005da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005de:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <HAL_RNG_MspInit+0x70>)
 80005e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80005e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80005f0:	bf00      	nop
 80005f2:	37d0      	adds	r7, #208	@ 0xd0
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48021800 	.word	0x48021800
 80005fc:	58024400 	.word	0x58024400

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <NMI_Handler+0x4>

08000608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <MemManage_Handler+0x4>

08000618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <UsageFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000656:	f000 f959 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <SystemInit+0x114>)
 8000666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800066a:	4a42      	ldr	r2, [pc, #264]	@ (8000774 <SystemInit+0x114>)
 800066c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000674:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <SystemInit+0x118>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	2b06      	cmp	r3, #6
 800067e:	d807      	bhi.n	8000690 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000680:	4b3d      	ldr	r3, [pc, #244]	@ (8000778 <SystemInit+0x118>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	4a3b      	ldr	r2, [pc, #236]	@ (8000778 <SystemInit+0x118>)
 800068a:	f043 0307 	orr.w	r3, r3, #7
 800068e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000690:	4b3a      	ldr	r3, [pc, #232]	@ (800077c <SystemInit+0x11c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a39      	ldr	r2, [pc, #228]	@ (800077c <SystemInit+0x11c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800069c:	4b37      	ldr	r3, [pc, #220]	@ (800077c <SystemInit+0x11c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006a2:	4b36      	ldr	r3, [pc, #216]	@ (800077c <SystemInit+0x11c>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4935      	ldr	r1, [pc, #212]	@ (800077c <SystemInit+0x11c>)
 80006a8:	4b35      	ldr	r3, [pc, #212]	@ (8000780 <SystemInit+0x120>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ae:	4b32      	ldr	r3, [pc, #200]	@ (8000778 <SystemInit+0x118>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d007      	beq.n	80006ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <SystemInit+0x118>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f023 030f 	bic.w	r3, r3, #15
 80006c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <SystemInit+0x118>)
 80006c4:	f043 0307 	orr.w	r3, r3, #7
 80006c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ca:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <SystemInit+0x11c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <SystemInit+0x11c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006d6:	4b29      	ldr	r3, [pc, #164]	@ (800077c <SystemInit+0x11c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <SystemInit+0x11c>)
 80006de:	4a29      	ldr	r2, [pc, #164]	@ (8000784 <SystemInit+0x124>)
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006e2:	4b26      	ldr	r3, [pc, #152]	@ (800077c <SystemInit+0x11c>)
 80006e4:	4a28      	ldr	r2, [pc, #160]	@ (8000788 <SystemInit+0x128>)
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006e8:	4b24      	ldr	r3, [pc, #144]	@ (800077c <SystemInit+0x11c>)
 80006ea:	4a28      	ldr	r2, [pc, #160]	@ (800078c <SystemInit+0x12c>)
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006ee:	4b23      	ldr	r3, [pc, #140]	@ (800077c <SystemInit+0x11c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <SystemInit+0x11c>)
 80006f6:	4a25      	ldr	r2, [pc, #148]	@ (800078c <SystemInit+0x12c>)
 80006f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <SystemInit+0x11c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <SystemInit+0x11c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	@ (800078c <SystemInit+0x12c>)
 8000704:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <SystemInit+0x11c>)
 8000708:	2200      	movs	r2, #0
 800070a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <SystemInit+0x11c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1a      	ldr	r2, [pc, #104]	@ (800077c <SystemInit+0x11c>)
 8000712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000716:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <SystemInit+0x11c>)
 800071a:	2200      	movs	r2, #0
 800071c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <SystemInit+0x130>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <SystemInit+0x134>)
 8000724:	4013      	ands	r3, r2
 8000726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800072a:	d202      	bcs.n	8000732 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <SystemInit+0x138>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <SystemInit+0x11c>)
 8000734:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800073c:	2b00      	cmp	r3, #0
 800073e:	d113      	bne.n	8000768 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <SystemInit+0x11c>)
 8000742:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000746:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <SystemInit+0x11c>)
 8000748:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800074c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <SystemInit+0x13c>)
 8000752:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000756:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <SystemInit+0x11c>)
 800075a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800075e:	4a07      	ldr	r2, [pc, #28]	@ (800077c <SystemInit+0x11c>)
 8000760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000764:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	52002000 	.word	0x52002000
 800077c:	58024400 	.word	0x58024400
 8000780:	eaf6ed7f 	.word	0xeaf6ed7f
 8000784:	02020200 	.word	0x02020200
 8000788:	01ff0000 	.word	0x01ff0000
 800078c:	01010280 	.word	0x01010280
 8000790:	5c001000 	.word	0x5c001000
 8000794:	ffff0000 	.word	0xffff0000
 8000798:	51008108 	.word	0x51008108
 800079c:	52004000 	.word	0x52004000

080007a0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <ExitRun0Mode+0x2c>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <ExitRun0Mode+0x2c>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007b0:	bf00      	nop
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <ExitRun0Mode+0x2c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	58024800 	.word	0x58024800

080007d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007d0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800080c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80007d4:	f7ff ffe4 	bl	80007a0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff ff42 	bl	8000660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f002 ffeb 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000806:	f7ff fd67 	bl	80002d8 <main>
  bx  lr
 800080a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800080c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000810:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000814:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000818:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 800081c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000820:	24000048 	.word	0x24000048

08000824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC3_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f96e 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000834:	f001 fa2a 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8000838:	4602      	mov	r2, r0
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_Init+0x68>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	4913      	ldr	r1, [pc, #76]	@ (8000894 <HAL_Init+0x6c>)
 8000846:	5ccb      	ldrb	r3, [r1, r3]
 8000848:	f003 031f 	and.w	r3, r3, #31
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <HAL_Init+0x68>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_Init+0x6c>)
 800085c:	5cd3      	ldrb	r3, [r2, r3]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	fa22 f303 	lsr.w	r3, r2, r3
 8000868:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <HAL_Init+0x70>)
 800086a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <HAL_Init+0x74>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f814 	bl	80008a0 <HAL_InitTick>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e002      	b.n	8000888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff fe69 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400
 8000894:	0800383c 	.word	0x0800383c
 8000898:	24000004 	.word	0x24000004
 800089c:	24000000 	.word	0x24000000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_InitTick+0x60>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e021      	b.n	80008f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_InitTick+0x64>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_InitTick+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f945 	bl	8000b5a <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008e8:	f000 f91d 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <HAL_InitTick+0x68>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2400000c 	.word	0x2400000c
 8000904:	24000000 	.word	0x24000000
 8000908:	24000008 	.word	0x24000008

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2400000c 	.word	0x2400000c
 8000930:	24000044 	.word	0x24000044

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	24000044 	.word	0x24000044

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2400000c 	.word	0x2400000c

08000994 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetREVID+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	5c001000 	.word	0x5c001000

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <__NVIC_SetPriorityGrouping+0x40>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <__NVIC_SetPriorityGrouping+0x40>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	05fa0000 	.word	0x05fa0000

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	@ (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	@ 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af0:	f7ff ff8e 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff47 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff5e 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffb2 	bl	8000acc <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b78:	f3bf 8f5f 	dmb	sy
}
 8000b7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <HAL_MPU_Disable+0x28>)
 8000b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b82:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <HAL_MPU_Disable+0x28>)
 8000b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_MPU_Disable+0x2c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	e000ed90 	.word	0xe000ed90

08000ba4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bac:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_MPU_Enable+0x38>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_MPU_Enable+0x3c>)
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <HAL_MPU_Enable+0x3c>)
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bc0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc2:	f3bf 8f4f 	dsb	sy
}
 8000bc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bc8:	f3bf 8f6f 	isb	sy
}
 8000bcc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed90 	.word	0xe000ed90
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	785a      	ldrb	r2, [r3, #1]
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <HAL_MPU_ConfigRegion+0x7c>)
 8000bf2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <HAL_MPU_ConfigRegion+0x7c>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <HAL_MPU_ConfigRegion+0x7c>)
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c00:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <HAL_MPU_ConfigRegion+0x7c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7b1b      	ldrb	r3, [r3, #12]
 8000c0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7adb      	ldrb	r3, [r3, #11]
 8000c12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a9b      	ldrb	r3, [r3, #10]
 8000c1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7b5b      	ldrb	r3, [r3, #13]
 8000c22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7b9b      	ldrb	r3, [r3, #14]
 8000c2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7bdb      	ldrb	r3, [r3, #15]
 8000c32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7a5b      	ldrb	r3, [r3, #9]
 8000c3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7a1b      	ldrb	r3, [r3, #8]
 8000c42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c50:	6113      	str	r3, [r2, #16]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed90 	.word	0xe000ed90

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c72:	4b89      	ldr	r3, [pc, #548]	@ (8000e98 <HAL_GPIO_Init+0x234>)
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c76:	e194      	b.n	8000fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8186 	beq.w	8000f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x44>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d017      	beq.n	8000d46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d123      	bne.n	8000d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	69b9      	ldr	r1, [r7, #24]
 8000d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80e0 	beq.w	8000f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e9c <HAL_GPIO_Init+0x238>)
 8000dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de2:	4a2e      	ldr	r2, [pc, #184]	@ (8000e9c <HAL_GPIO_Init+0x238>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dec:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <HAL_GPIO_Init+0x238>)
 8000dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ea0 <HAL_GPIO_Init+0x23c>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <HAL_GPIO_Init+0x240>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d052      	beq.n	8000ecc <HAL_GPIO_Init+0x268>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <HAL_GPIO_Init+0x244>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d031      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <HAL_GPIO_Init+0x248>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <HAL_GPIO_Init+0x24c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <HAL_GPIO_Init+0x250>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x222>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_GPIO_Init+0x254>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x21e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	@ (8000ebc <HAL_GPIO_Init+0x258>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a19      	ldr	r2, [pc, #100]	@ (8000ec0 <HAL_GPIO_Init+0x25c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x216>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <HAL_GPIO_Init+0x260>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x212>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a17      	ldr	r2, [pc, #92]	@ (8000ec8 <HAL_GPIO_Init+0x264>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e6e:	2309      	movs	r3, #9
 8000e70:	e02d      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e72:	230a      	movs	r3, #10
 8000e74:	e02b      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e76:	2308      	movs	r3, #8
 8000e78:	e029      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e027      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e025      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e023      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e021      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e01f      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e01d      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e01b      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e96:	bf00      	nop
 8000e98:	58000080 	.word	0x58000080
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58000400 	.word	0x58000400
 8000ea4:	58020000 	.word	0x58020000
 8000ea8:	58020400 	.word	0x58020400
 8000eac:	58020800 	.word	0x58020800
 8000eb0:	58020c00 	.word	0x58020c00
 8000eb4:	58021000 	.word	0x58021000
 8000eb8:	58021400 	.word	0x58021400
 8000ebc:	58021800 	.word	0x58021800
 8000ec0:	58021c00 	.word	0x58021c00
 8000ec4:	58022000 	.word	0x58022000
 8000ec8:	58022400 	.word	0x58022400
 8000ecc:	2300      	movs	r3, #0
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ede:	4938      	ldr	r1, [pc, #224]	@ (8000fc0 <HAL_GPIO_Init+0x35c>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f ae63 	bne.w	8000c78 <HAL_GPIO_Init+0x14>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	@ 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58000400 	.word	0x58000400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00a      	beq.n	8001022 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800100c:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d001      	beq.n	800101e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e01f      	b.n	800105e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e01d      	b.n	800105e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f023 0207 	bic.w	r2, r3, #7
 800102a:	490f      	ldr	r1, [pc, #60]	@ (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4313      	orrs	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001032:	f7ff fc7f 	bl	8000934 <HAL_GetTick>
 8001036:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001038:	e009      	b.n	800104e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800103a:	f7ff fc7b 	bl	8000934 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001048:	d901      	bls.n	800104e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e007      	b.n	800105e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800105a:	d1ee      	bne.n	800103a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58024800 	.word	0x58024800

0800106c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	@ 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f000 bc48 	b.w	8001910 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 8088 	beq.w	800119e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108e:	4b99      	ldr	r3, [pc, #612]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001098:	4b96      	ldr	r3, [pc, #600]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800109a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a0:	2b10      	cmp	r3, #16
 80010a2:	d007      	beq.n	80010b4 <HAL_RCC_OscConfig+0x48>
 80010a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a6:	2b18      	cmp	r3, #24
 80010a8:	d111      	bne.n	80010ce <HAL_RCC_OscConfig+0x62>
 80010aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d10c      	bne.n	80010ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4b8f      	ldr	r3, [pc, #572]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d06d      	beq.n	800119c <HAL_RCC_OscConfig+0x130>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d169      	bne.n	800119c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f000 bc21 	b.w	8001910 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d6:	d106      	bne.n	80010e6 <HAL_RCC_OscConfig+0x7a>
 80010d8:	4b86      	ldr	r3, [pc, #536]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a85      	ldr	r2, [pc, #532]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80010de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e02e      	b.n	8001144 <HAL_RCC_OscConfig+0xd8>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x9c>
 80010ee:	4b81      	ldr	r3, [pc, #516]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a80      	ldr	r2, [pc, #512]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a7d      	ldr	r2, [pc, #500]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xd8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0xc0>
 8001112:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a77      	ldr	r2, [pc, #476]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b75      	ldr	r3, [pc, #468]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a74      	ldr	r2, [pc, #464]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xd8>
 800112c:	4b71      	ldr	r3, [pc, #452]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a70      	ldr	r2, [pc, #448]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b6e      	ldr	r3, [pc, #440]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a6d      	ldr	r2, [pc, #436]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fbf2 	bl	8000934 <HAL_GetTick>
 8001150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fbee 	bl	8000934 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e3d4      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001166:	4b63      	ldr	r3, [pc, #396]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xe8>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff fbde 	bl	8000934 <HAL_GetTick>
 8001178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fbda 	bl	8000934 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e3c0      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800118e:	4b59      	ldr	r3, [pc, #356]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x110>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80ca 	beq.w	8001340 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ac:	4b51      	ldr	r3, [pc, #324]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011b6:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80011b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_RCC_OscConfig+0x166>
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	2b18      	cmp	r3, #24
 80011c6:	d156      	bne.n	8001276 <HAL_RCC_OscConfig+0x20a>
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d151      	bne.n	8001276 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d2:	4b48      	ldr	r3, [pc, #288]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x17e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e392      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011ea:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0219 	bic.w	r2, r3, #25
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	493f      	ldr	r1, [pc, #252]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fb9a 	bl	8000934 <HAL_GetTick>
 8001200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fb96 	bl	8000934 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e37c      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001216:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	f7ff fbb7 	bl	8000994 <HAL_GetREVID>
 8001226:	4603      	mov	r3, r0
 8001228:	f241 0203 	movw	r2, #4099	@ 0x1003
 800122c:	4293      	cmp	r3, r2
 800122e:	d817      	bhi.n	8001260 <HAL_RCC_OscConfig+0x1f4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	2b40      	cmp	r3, #64	@ 0x40
 8001236:	d108      	bne.n	800124a <HAL_RCC_OscConfig+0x1de>
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001240:	4a2c      	ldr	r2, [pc, #176]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001246:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001248:	e07a      	b.n	8001340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	031b      	lsls	r3, r3, #12
 8001258:	4926      	ldr	r1, [pc, #152]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800125e:	e06f      	b.n	8001340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	061b      	lsls	r3, r3, #24
 800126e:	4921      	ldr	r1, [pc, #132]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001274:	e064      	b.n	8001340 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d047      	beq.n	800130e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0219 	bic.w	r2, r3, #25
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	491a      	ldr	r1, [pc, #104]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fb50 	bl	8000934 <HAL_GetTick>
 8001294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff fb4c 	bl	8000934 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e332      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	f7ff fb6d 	bl	8000994 <HAL_GetREVID>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d819      	bhi.n	80012f8 <HAL_RCC_OscConfig+0x28c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b40      	cmp	r3, #64	@ 0x40
 80012ca:	d108      	bne.n	80012de <HAL_RCC_OscConfig+0x272>
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80012d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012da:	6053      	str	r3, [r2, #4]
 80012dc:	e030      	b.n	8001340 <HAL_RCC_OscConfig+0x2d4>
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	031b      	lsls	r3, r3, #12
 80012ec:	4901      	ldr	r1, [pc, #4]	@ (80012f4 <HAL_RCC_OscConfig+0x288>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
 80012f2:	e025      	b.n	8001340 <HAL_RCC_OscConfig+0x2d4>
 80012f4:	58024400 	.word	0x58024400
 80012f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	4997      	ldr	r1, [pc, #604]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
 800130c:	e018      	b.n	8001340 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130e:	4b95      	ldr	r3, [pc, #596]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a94      	ldr	r2, [pc, #592]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	f7ff fb0b 	bl	8000934 <HAL_GetTick>
 800131e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fb07 	bl	8000934 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e2ed      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001334:	4b8b      	ldr	r3, [pc, #556]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a9 	beq.w	80014a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b85      	ldr	r3, [pc, #532]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001356:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001358:	4b82      	ldr	r3, [pc, #520]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d007      	beq.n	8001374 <HAL_RCC_OscConfig+0x308>
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b18      	cmp	r3, #24
 8001368:	d13a      	bne.n	80013e0 <HAL_RCC_OscConfig+0x374>
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d135      	bne.n	80013e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001374:	4b7b      	ldr	r3, [pc, #492]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x320>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b80      	cmp	r3, #128	@ 0x80
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2c1      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800138c:	f7ff fb02 	bl	8000994 <HAL_GetREVID>
 8001390:	4603      	mov	r3, r0
 8001392:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001396:	4293      	cmp	r3, r2
 8001398:	d817      	bhi.n	80013ca <HAL_RCC_OscConfig+0x35e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d108      	bne.n	80013b4 <HAL_RCC_OscConfig+0x348>
 80013a2:	4b70      	ldr	r3, [pc, #448]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b2:	e075      	b.n	80014a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	069b      	lsls	r3, r3, #26
 80013c2:	4968      	ldr	r1, [pc, #416]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013c8:	e06a      	b.n	80014a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ca:	4b66      	ldr	r3, [pc, #408]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	061b      	lsls	r3, r3, #24
 80013d8:	4962      	ldr	r1, [pc, #392]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013de:	e05f      	b.n	80014a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d042      	beq.n	800146e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa9e 	bl	8000934 <HAL_GetTick>
 80013f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80013fc:	f7ff fa9a 	bl	8000934 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e280      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800140e:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800141a:	f7ff fabb 	bl	8000994 <HAL_GetREVID>
 800141e:	4603      	mov	r3, r0
 8001420:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001424:	4293      	cmp	r3, r2
 8001426:	d817      	bhi.n	8001458 <HAL_RCC_OscConfig+0x3ec>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	2b20      	cmp	r3, #32
 800142e:	d108      	bne.n	8001442 <HAL_RCC_OscConfig+0x3d6>
 8001430:	4b4c      	ldr	r3, [pc, #304]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001438:	4a4a      	ldr	r2, [pc, #296]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 800143a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800143e:	6053      	str	r3, [r2, #4]
 8001440:	e02e      	b.n	80014a0 <HAL_RCC_OscConfig+0x434>
 8001442:	4b48      	ldr	r3, [pc, #288]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	069b      	lsls	r3, r3, #26
 8001450:	4944      	ldr	r1, [pc, #272]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
 8001456:	e023      	b.n	80014a0 <HAL_RCC_OscConfig+0x434>
 8001458:	4b42      	ldr	r3, [pc, #264]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	493f      	ldr	r1, [pc, #252]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e018      	b.n	80014a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800146e:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3c      	ldr	r2, [pc, #240]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fa5b 	bl	8000934 <HAL_GetTick>
 800147e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001482:	f7ff fa57 	bl	8000934 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e23d      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001494:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d036      	beq.n	800151a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d019      	beq.n	80014e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa38 	bl	8000934 <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fa34 	bl	8000934 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e21a      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x45c>
 80014e6:	e018      	b.n	800151a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa1e 	bl	8000934 <HAL_GetTick>
 80014f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fa1a 	bl	8000934 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e200      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	2b00      	cmp	r3, #0
 8001524:	d039      	beq.n	800159a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01c      	beq.n	8001568 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001538:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800153a:	f7ff f9fb 	bl	8000934 <HAL_GetTick>
 800153e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001542:	f7ff f9f7 	bl	8000934 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1dd      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x4d6>
 8001560:	e01b      	b.n	800159a <HAL_RCC_OscConfig+0x52e>
 8001562:	bf00      	nop
 8001564:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001568:	4b9b      	ldr	r3, [pc, #620]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a9a      	ldr	r2, [pc, #616]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800156e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001572:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001574:	f7ff f9de 	bl	8000934 <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800157c:	f7ff f9da 	bl	8000934 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1c0      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800158e:	4b92      	ldr	r3, [pc, #584]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8081 	beq.w	80016aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015a8:	4b8c      	ldr	r3, [pc, #560]	@ (80017dc <HAL_RCC_OscConfig+0x770>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a8b      	ldr	r2, [pc, #556]	@ (80017dc <HAL_RCC_OscConfig+0x770>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015b4:	f7ff f9be 	bl	8000934 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015bc:	f7ff f9ba 	bl	8000934 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1a0      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ce:	4b83      	ldr	r3, [pc, #524]	@ (80017dc <HAL_RCC_OscConfig+0x770>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x584>
 80015e2:	4b7d      	ldr	r3, [pc, #500]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e6:	4a7c      	ldr	r2, [pc, #496]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ee:	e02d      	b.n	800164c <HAL_RCC_OscConfig+0x5e0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x5a6>
 80015f8:	4b77      	ldr	r3, [pc, #476]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fc:	4a76      	ldr	r2, [pc, #472]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	@ 0x70
 8001604:	4b74      	ldr	r3, [pc, #464]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001608:	4a73      	ldr	r2, [pc, #460]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x5e0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c8>
 800161a:	4b6f      	ldr	r3, [pc, #444]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	4a6e      	ldr	r2, [pc, #440]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6713      	str	r3, [r2, #112]	@ 0x70
 8001626:	4b6c      	ldr	r3, [pc, #432]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162a:	4a6b      	ldr	r2, [pc, #428]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6713      	str	r3, [r2, #112]	@ 0x70
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x5e0>
 8001634:	4b68      	ldr	r3, [pc, #416]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001638:	4a67      	ldr	r2, [pc, #412]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001640:	4b65      	ldr	r3, [pc, #404]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001644:	4a64      	ldr	r2, [pc, #400]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d015      	beq.n	8001680 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff f96e 	bl	8000934 <HAL_GetTick>
 8001658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff f96a 	bl	8000934 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e14e      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001672:	4b59      	ldr	r3, [pc, #356]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ee      	beq.n	800165c <HAL_RCC_OscConfig+0x5f0>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff f958 	bl	8000934 <HAL_GetTick>
 8001684:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff f954 	bl	8000934 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e138      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800169e:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ee      	bne.n	8001688 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 812d 	beq.w	800190e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016b4:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016bc:	2b18      	cmp	r3, #24
 80016be:	f000 80bd 	beq.w	800183c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	f040 809e 	bne.w	8001808 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a41      	ldr	r2, [pc, #260]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80016d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff f92c 	bl	8000934 <HAL_GetTick>
 80016dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff f928 	bl	8000934 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e10e      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <HAL_RCC_OscConfig+0x774>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	430a      	orrs	r2, r1
 8001712:	4931      	ldr	r1, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001714:	4313      	orrs	r3, r2
 8001716:	628b      	str	r3, [r1, #40]	@ 0x28
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	3b01      	subs	r3, #1
 800171e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001726:	3b01      	subs	r3, #1
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	b29b      	uxth	r3, r3
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001740:	3b01      	subs	r3, #1
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001748:	4923      	ldr	r1, [pc, #140]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800174e:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800175c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001766:	00d2      	lsls	r2, r2, #3
 8001768:	491b      	ldr	r1, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001772:	f023 020c 	bic.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4917      	ldr	r1, [pc, #92]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	f023 0202 	bic.w	r2, r3, #2
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	4912      	ldr	r1, [pc, #72]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 800178e:	4313      	orrs	r3, r2
 8001790:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_RCC_OscConfig+0x76c>)
 80017c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f8b1 	bl	8000934 <HAL_GetTick>
 80017d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d4:	e011      	b.n	80017fa <HAL_RCC_OscConfig+0x78e>
 80017d6:	bf00      	nop
 80017d8:	58024400 	.word	0x58024400
 80017dc:	58024800 	.word	0x58024800
 80017e0:	fffffc0c 	.word	0xfffffc0c
 80017e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f8a4 	bl	8000934 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e08a      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017fa:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x77c>
 8001806:	e082      	b.n	800190e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a42      	ldr	r2, [pc, #264]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 800180e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff f88e 	bl	8000934 <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff f88a 	bl	8000934 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e070      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800182e:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x7b0>
 800183a:	e068      	b.n	800190e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800183c:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001842:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	2b01      	cmp	r3, #1
 800184e:	d031      	beq.n	80018b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0203 	and.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d12a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d122      	bne.n	80018b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0a5b      	lsrs	r3, r3, #9
 8001882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	0c1b      	lsrs	r3, r3, #16
 8001894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	0e1b      	lsrs	r3, r3, #24
 80018a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e02b      	b.n	8001910 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018b8:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 80018ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d01f      	beq.n	800190e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018da:	f7ff f82b 	bl	8000934 <HAL_GetTick>
 80018de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018e0:	bf00      	nop
 80018e2:	f7ff f827 	bl	8000934 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d0f9      	beq.n	80018e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 80018f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_RCC_OscConfig+0x8b0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018fa:	00d2      	lsls	r2, r2, #3
 80018fc:	4906      	ldr	r1, [pc, #24]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001902:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 8001904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_RCC_OscConfig+0x8ac>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400
 800191c:	ffff0007 	.word	0xffff0007

08001920 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e19c      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b8a      	ldr	r3, [pc, #552]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d910      	bls.n	8001964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b87      	ldr	r3, [pc, #540]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 020f 	bic.w	r2, r3, #15
 800194a:	4985      	ldr	r1, [pc, #532]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b83      	ldr	r3, [pc, #524]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e184      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	4b7b      	ldr	r3, [pc, #492]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800197c:	429a      	cmp	r2, r3
 800197e:	d908      	bls.n	8001992 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001980:	4b78      	ldr	r3, [pc, #480]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4975      	ldr	r1, [pc, #468]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 800198e:	4313      	orrs	r3, r2
 8001990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d908      	bls.n	80019c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	496a      	ldr	r1, [pc, #424]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	4b64      	ldr	r3, [pc, #400]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019d8:	429a      	cmp	r2, r3
 80019da:	d908      	bls.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019dc:	4b61      	ldr	r3, [pc, #388]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	495e      	ldr	r1, [pc, #376]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	4b59      	ldr	r3, [pc, #356]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d908      	bls.n	8001a1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a0a:	4b56      	ldr	r3, [pc, #344]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4953      	ldr	r1, [pc, #332]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d010      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d908      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f023 020f 	bic.w	r2, r3, #15
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4947      	ldr	r1, [pc, #284]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d055      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a56:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4940      	ldr	r1, [pc, #256]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a70:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d121      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0f6      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a88:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d115      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0ea      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa0:	4b30      	ldr	r3, [pc, #192]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0de      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0d6      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f023 0207 	bic.w	r2, r3, #7
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4925      	ldr	r1, [pc, #148]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad2:	f7fe ff2f 	bl	8000934 <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7fe ff2b 	bl	8000934 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0be      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d1eb      	bne.n	8001ada <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d208      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f023 020f 	bic.w	r2, r3, #15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d214      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 020f 	bic.w	r2, r3, #15
 8001b46:	4906      	ldr	r1, [pc, #24]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e086      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
 8001b60:	52002000 	.word	0x52002000
 8001b64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d208      	bcs.n	8001b96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b84:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4939      	ldr	r1, [pc, #228]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d010      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d208      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bb2:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	492e      	ldr	r1, [pc, #184]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d208      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001be0:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4922      	ldr	r1, [pc, #136]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d208      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4917      	ldr	r1, [pc, #92]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c20:	f000 f834 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	4912      	ldr	r1, [pc, #72]	@ (8001c7c <HAL_RCC_ClockConfig+0x35c>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_RCC_ClockConfig+0x35c>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <HAL_RCC_ClockConfig+0x360>)
 8001c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_RCC_ClockConfig+0x364>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x368>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fe1c 	bl	80008a0 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	0800383c 	.word	0x0800383c
 8001c80:	24000004 	.word	0x24000004
 8001c84:	24000000 	.word	0x24000000
 8001c88:	24000008 	.word	0x24000008

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c92:	4bb3      	ldr	r3, [pc, #716]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c9a:	2b18      	cmp	r3, #24
 8001c9c:	f200 8155 	bhi.w	8001f4a <HAL_RCC_GetSysClockFreq+0x2be>
 8001ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001d0d 	.word	0x08001d0d
 8001cac:	08001f4b 	.word	0x08001f4b
 8001cb0:	08001f4b 	.word	0x08001f4b
 8001cb4:	08001f4b 	.word	0x08001f4b
 8001cb8:	08001f4b 	.word	0x08001f4b
 8001cbc:	08001f4b 	.word	0x08001f4b
 8001cc0:	08001f4b 	.word	0x08001f4b
 8001cc4:	08001f4b 	.word	0x08001f4b
 8001cc8:	08001d33 	.word	0x08001d33
 8001ccc:	08001f4b 	.word	0x08001f4b
 8001cd0:	08001f4b 	.word	0x08001f4b
 8001cd4:	08001f4b 	.word	0x08001f4b
 8001cd8:	08001f4b 	.word	0x08001f4b
 8001cdc:	08001f4b 	.word	0x08001f4b
 8001ce0:	08001f4b 	.word	0x08001f4b
 8001ce4:	08001f4b 	.word	0x08001f4b
 8001ce8:	08001d39 	.word	0x08001d39
 8001cec:	08001f4b 	.word	0x08001f4b
 8001cf0:	08001f4b 	.word	0x08001f4b
 8001cf4:	08001f4b 	.word	0x08001f4b
 8001cf8:	08001f4b 	.word	0x08001f4b
 8001cfc:	08001f4b 	.word	0x08001f4b
 8001d00:	08001f4b 	.word	0x08001f4b
 8001d04:	08001f4b 	.word	0x08001f4b
 8001d08:	08001d3f 	.word	0x08001d3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d0c:	4b94      	ldr	r3, [pc, #592]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d18:	4b91      	ldr	r3, [pc, #580]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	4a90      	ldr	r2, [pc, #576]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d2a:	e111      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d2e:	61bb      	str	r3, [r7, #24]
      break;
 8001d30:	e10e      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d32:	4b8d      	ldr	r3, [pc, #564]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d34:	61bb      	str	r3, [r7, #24]
      break;
 8001d36:	e10b      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d38:	4b8c      	ldr	r3, [pc, #560]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d3a:	61bb      	str	r3, [r7, #24]
      break;
 8001d3c:	e108      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d3e:	4b88      	ldr	r3, [pc, #544]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d48:	4b85      	ldr	r3, [pc, #532]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d54:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d5e:	4b80      	ldr	r3, [pc, #512]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80e1 	beq.w	8001f44 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f000 8083 	beq.w	8001e90 <HAL_RCC_GetSysClockFreq+0x204>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	f200 80a1 	bhi.w	8001ed4 <HAL_RCC_GetSysClockFreq+0x248>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x114>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d056      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d9e:	e099      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001da0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dac:	4b6c      	ldr	r3, [pc, #432]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	4a6b      	ldr	r2, [pc, #428]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd6:	4b62      	ldr	r3, [pc, #392]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e06:	e087      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e4a:	e065      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e5e:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e8e:	e043      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ed2:	e021      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ede:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001efa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	0a5b      	lsrs	r3, r3, #9
 8001f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f22:	3301      	adds	r3, #1
 8001f24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
      break;
 8001f48:	e002      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f4c:	61bb      	str	r3, [r7, #24]
      break;
 8001f4e:	bf00      	nop
  }

  return sysclockfreq;
 8001f50:	69bb      	ldr	r3, [r7, #24]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	@ 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	58024400 	.word	0x58024400
 8001f64:	03d09000 	.word	0x03d09000
 8001f68:	003d0900 	.word	0x003d0900
 8001f6c:	017d7840 	.word	0x017d7840
 8001f70:	46000000 	.word	0x46000000
 8001f74:	4c742400 	.word	0x4c742400
 8001f78:	4a742400 	.word	0x4a742400
 8001f7c:	4bbebc20 	.word	0x4bbebc20

08001f80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b0ca      	sub	sp, #296	@ 0x128
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	ea54 0305 	orrs.w	r3, r4, r5
 8001faa:	d049      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001fb6:	d02f      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001fb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001fbc:	d828      	bhi.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001fbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fc2:	d01a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001fc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fc8:	d822      	bhi.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fd2:	d007      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fd4:	e01c      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fd6:	4bb8      	ldr	r3, [pc, #736]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	4ab7      	ldr	r2, [pc, #732]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001fe2:	e01a      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fe8:	3308      	adds	r3, #8
 8001fea:	2102      	movs	r1, #2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 f9d1 	bl	8003394 <RCCEx_PLL2_Config>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001ff8:	e00f      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ffe:	3328      	adds	r3, #40	@ 0x28
 8002000:	2102      	movs	r1, #2
 8002002:	4618      	mov	r0, r3
 8002004:	f001 fa78 	bl	80034f8 <RCCEx_PLL3_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800200e:	e004      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002016:	e000      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800201a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002022:	4ba5      	ldr	r3, [pc, #660]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002026:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800202a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800202e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002030:	4aa1      	ldr	r2, [pc, #644]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002032:	430b      	orrs	r3, r1
 8002034:	6513      	str	r3, [r2, #80]	@ 0x50
 8002036:	e003      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800203c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800204c:	f04f 0900 	mov.w	r9, #0
 8002050:	ea58 0309 	orrs.w	r3, r8, r9
 8002054:	d047      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	2b04      	cmp	r3, #4
 800205e:	d82a      	bhi.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002060:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	0800207d 	.word	0x0800207d
 800206c:	0800208b 	.word	0x0800208b
 8002070:	080020a1 	.word	0x080020a1
 8002074:	080020bf 	.word	0x080020bf
 8002078:	080020bf 	.word	0x080020bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800207c:	4b8e      	ldr	r3, [pc, #568]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	4a8d      	ldr	r2, [pc, #564]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002088:	e01a      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800208a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800208e:	3308      	adds	r3, #8
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f001 f97e 	bl	8003394 <RCCEx_PLL2_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800209e:	e00f      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020a4:	3328      	adds	r3, #40	@ 0x28
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 fa25 	bl	80034f8 <RCCEx_PLL3_Config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020b4:	e004      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80020bc:	e000      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80020be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c8:	4b7b      	ldr	r3, [pc, #492]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020cc:	f023 0107 	bic.w	r1, r3, #7
 80020d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	4a78      	ldr	r2, [pc, #480]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020d8:	430b      	orrs	r3, r1
 80020da:	6513      	str	r3, [r2, #80]	@ 0x50
 80020dc:	e003      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80020e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80020e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80020f2:	f04f 0b00 	mov.w	fp, #0
 80020f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80020fa:	d04c      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80020fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002106:	d030      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210c:	d829      	bhi.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800210e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002110:	d02d      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002112:	2bc0      	cmp	r3, #192	@ 0xc0
 8002114:	d825      	bhi.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002116:	2b80      	cmp	r3, #128	@ 0x80
 8002118:	d018      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800211a:	2b80      	cmp	r3, #128	@ 0x80
 800211c:	d821      	bhi.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002122:	2b40      	cmp	r3, #64	@ 0x40
 8002124:	d007      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002126:	e01c      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002128:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	4a62      	ldr	r2, [pc, #392]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800212e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002134:	e01c      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800213a:	3308      	adds	r3, #8
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f001 f928 	bl	8003394 <RCCEx_PLL2_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800214a:	e011      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800214c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002150:	3328      	adds	r3, #40	@ 0x28
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f001 f9cf 	bl	80034f8 <RCCEx_PLL3_Config>
 800215a:	4603      	mov	r3, r0
 800215c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002160:	e006      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002168:	e002      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800216e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002178:	4b4f      	ldr	r3, [pc, #316]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	4a4c      	ldr	r2, [pc, #304]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002188:	430b      	orrs	r3, r1
 800218a:	6513      	str	r3, [r2, #80]	@ 0x50
 800218c:	e003      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800218e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80021a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80021ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80021b0:	460b      	mov	r3, r1
 80021b2:	4313      	orrs	r3, r2
 80021b4:	d053      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80021b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021c2:	d035      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80021c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021c8:	d82e      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80021ce:	d031      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80021d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80021d4:	d828      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021da:	d01a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80021dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e0:	d822      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80021e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021ea:	d007      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80021ec:	e01c      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ee:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	4a31      	ldr	r2, [pc, #196]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021fa:	e01c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002200:	3308      	adds	r3, #8
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f001 f8c5 	bl	8003394 <RCCEx_PLL2_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002210:	e011      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002216:	3328      	adds	r3, #40	@ 0x28
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f001 f96c 	bl	80034f8 <RCCEx_PLL3_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002226:	e006      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800222e:	e002      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10b      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800223e:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800224a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800224e:	4a1a      	ldr	r2, [pc, #104]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002250:	430b      	orrs	r3, r1
 8002252:	6593      	str	r3, [r2, #88]	@ 0x58
 8002254:	e003      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800225a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800225e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800226a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002274:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002278:	460b      	mov	r3, r1
 800227a:	4313      	orrs	r3, r2
 800227c:	d056      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800227e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800228a:	d038      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800228c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002290:	d831      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002296:	d034      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002298:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800229c:	d82b      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800229e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022a2:	d01d      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80022a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022a8:	d825      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80022ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80022b4:	e01f      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022b6:	bf00      	nop
 80022b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022bc:	4ba2      	ldr	r3, [pc, #648]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	4aa1      	ldr	r2, [pc, #644]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022c8:	e01c      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ce:	3308      	adds	r3, #8
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f85e 	bl	8003394 <RCCEx_PLL2_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80022de:	e011      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022e4:	3328      	adds	r3, #40	@ 0x28
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 f905 	bl	80034f8 <RCCEx_PLL3_Config>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022f4:	e006      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022fc:	e002      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800230c:	4b8e      	ldr	r3, [pc, #568]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800231c:	4a8a      	ldr	r2, [pc, #552]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800231e:	430b      	orrs	r3, r1
 8002320:	6593      	str	r3, [r2, #88]	@ 0x58
 8002322:	e003      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800232c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002342:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002346:	460b      	mov	r3, r1
 8002348:	4313      	orrs	r3, r2
 800234a:	d03a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800234c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	2b30      	cmp	r3, #48	@ 0x30
 8002354:	d01f      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002356:	2b30      	cmp	r3, #48	@ 0x30
 8002358:	d819      	bhi.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800235a:	2b20      	cmp	r3, #32
 800235c:	d00c      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800235e:	2b20      	cmp	r3, #32
 8002360:	d815      	bhi.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002366:	2b10      	cmp	r3, #16
 8002368:	d111      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800236a:	4b77      	ldr	r3, [pc, #476]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	4a76      	ldr	r2, [pc, #472]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002376:	e011      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800237c:	3308      	adds	r3, #8
 800237e:	2102      	movs	r1, #2
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f807 	bl	8003394 <RCCEx_PLL2_Config>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800238c:	e006      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002394:	e002      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800239a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800239c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023a4:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80023ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	4a65      	ldr	r2, [pc, #404]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023b4:	430b      	orrs	r3, r1
 80023b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b8:	e003      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80023c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80023ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80023d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80023dc:	460b      	mov	r3, r1
 80023de:	4313      	orrs	r3, r2
 80023e0:	d051      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80023e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023ec:	d035      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80023ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023f2:	d82e      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80023f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023f8:	d031      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80023fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023fe:	d828      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002404:	d01a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800240a:	d822      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002414:	d007      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002416:	e01c      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002418:	4b4b      	ldr	r3, [pc, #300]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	4a4a      	ldr	r2, [pc, #296]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800241e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002424:	e01c      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800242a:	3308      	adds	r3, #8
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f000 ffb0 	bl	8003394 <RCCEx_PLL2_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800243a:	e011      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800243c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002440:	3328      	adds	r3, #40	@ 0x28
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f857 	bl	80034f8 <RCCEx_PLL3_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002450:	e006      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002458:	e002      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800245e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002468:	4b37      	ldr	r3, [pc, #220]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800246a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	4a34      	ldr	r2, [pc, #208]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002478:	430b      	orrs	r3, r1
 800247a:	6513      	str	r3, [r2, #80]	@ 0x50
 800247c:	e003      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800249c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80024a0:	460b      	mov	r3, r1
 80024a2:	4313      	orrs	r3, r2
 80024a4:	d056      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80024a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b0:	d033      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80024b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b6:	d82c      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024bc:	d02f      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80024be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024c2:	d826      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024c8:	d02b      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80024ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024ce:	d820      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024d4:	d012      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80024d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024da:	d81a      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d022      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d115      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80024e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ea:	3308      	adds	r3, #8
 80024ec:	2101      	movs	r1, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 ff50 	bl	8003394 <RCCEx_PLL2_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80024fa:	e015      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80024fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002500:	3328      	adds	r3, #40	@ 0x28
 8002502:	2101      	movs	r1, #1
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fff7 	bl	80034f8 <RCCEx_PLL3_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002510:	e00a      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002518:	e006      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800251a:	bf00      	nop
 800251c:	e004      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800251e:	bf00      	nop
 8002520:	e002      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002534:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800253c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800253e:	4a02      	ldr	r2, [pc, #8]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002540:	430b      	orrs	r3, r1
 8002542:	6513      	str	r3, [r2, #80]	@ 0x50
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002546:	bf00      	nop
 8002548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800256a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800256e:	460b      	mov	r3, r1
 8002570:	4313      	orrs	r3, r2
 8002572:	d055      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002580:	d033      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002582:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002586:	d82c      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800258c:	d02f      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002592:	d826      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002598:	d02b      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800259a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800259e:	d820      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025a4:	d012      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80025a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025aa:	d81a      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d022      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80025b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025b4:	d115      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80025b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ba:	3308      	adds	r3, #8
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fee8 	bl	8003394 <RCCEx_PLL2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80025ca:	e015      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025d0:	3328      	adds	r3, #40	@ 0x28
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 ff8f 	bl	80034f8 <RCCEx_PLL3_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80025e0:	e00a      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025ea:	bf00      	nop
 80025ec:	e004      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80025f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002600:	4ba3      	ldr	r3, [pc, #652]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800260c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002610:	4a9f      	ldr	r2, [pc, #636]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002612:	430b      	orrs	r3, r1
 8002614:	6593      	str	r3, [r2, #88]	@ 0x58
 8002616:	e003      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800261c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800262c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800263a:	460b      	mov	r3, r1
 800263c:	4313      	orrs	r3, r2
 800263e:	d037      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800264a:	d00e      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800264c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002650:	d816      	bhi.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800265a:	d111      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265c:	4b8c      	ldr	r3, [pc, #560]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	4a8b      	ldr	r2, [pc, #556]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002668:	e00f      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800266a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800266e:	3308      	adds	r3, #8
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fe8e 	bl	8003394 <RCCEx_PLL2_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800267e:	e004      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002686:	e000      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800268a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002692:	4b7f      	ldr	r3, [pc, #508]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002696:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800269a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a0:	4a7b      	ldr	r2, [pc, #492]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026a2:	430b      	orrs	r3, r1
 80026a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80026a6:	e003      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80026b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80026bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80026c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4313      	orrs	r3, r2
 80026ce:	d039      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d81c      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80026da:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	0800271d 	.word	0x0800271d
 80026e4:	080026f1 	.word	0x080026f1
 80026e8:	080026ff 	.word	0x080026ff
 80026ec:	0800271d 	.word	0x0800271d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f0:	4b67      	ldr	r3, [pc, #412]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	4a66      	ldr	r2, [pc, #408]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80026fc:	e00f      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002702:	3308      	adds	r3, #8
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fe44 	bl	8003394 <RCCEx_PLL2_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002712:	e004      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800271c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800271e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002726:	4b5a      	ldr	r3, [pc, #360]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	f023 0103 	bic.w	r1, r3, #3
 800272e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002734:	4a56      	ldr	r2, [pc, #344]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002736:	430b      	orrs	r3, r1
 8002738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273a:	e003      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800275a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800275e:	460b      	mov	r3, r1
 8002760:	4313      	orrs	r3, r2
 8002762:	f000 809f 	beq.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002766:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a4a      	ldr	r2, [pc, #296]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002772:	f7fe f8df 	bl	8000934 <HAL_GetTick>
 8002776:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277a:	e00b      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe f8da 	bl	8000934 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	@ 0x64
 800278a:	d903      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002794:	4b3f      	ldr	r3, [pc, #252]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ed      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80027a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d179      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027a8:	4b39      	ldr	r3, [pc, #228]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027b4:	4053      	eors	r3, r2
 80027b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d015      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027be:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ca:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a30      	ldr	r2, [pc, #192]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80027ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f6:	d118      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe f89c 	bl	8000934 <HAL_GetTick>
 80027fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002800:	e00d      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f897 	bl	8000934 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002812:	429a      	cmp	r2, r3
 8002814:	d903      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800281c:	e005      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0eb      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800282a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800282e:	2b00      	cmp	r3, #0
 8002830:	d129      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800283a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800283e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002842:	d10e      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800284c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002854:	091a      	lsrs	r2, r3, #4
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002858:	4013      	ands	r3, r2
 800285a:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800285c:	430b      	orrs	r3, r1
 800285e:	6113      	str	r3, [r2, #16]
 8002860:	e005      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002868:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800286c:	6113      	str	r3, [r2, #16]
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002870:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002880:	430b      	orrs	r3, r1
 8002882:	6713      	str	r3, [r2, #112]	@ 0x70
 8002884:	e00e      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800288a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800288e:	e009      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002890:	58024400 	.word	0x58024400
 8002894:	58024800 	.word	0x58024800
 8002898:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f002 0301 	and.w	r3, r2, #1
 80028b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028be:	460b      	mov	r3, r1
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f000 8089 	beq.w	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80028c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028cc:	2b28      	cmp	r3, #40	@ 0x28
 80028ce:	d86b      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80028d0:	a201      	add	r2, pc, #4	@ (adr r2, 80028d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080029b1 	.word	0x080029b1
 80028dc:	080029a9 	.word	0x080029a9
 80028e0:	080029a9 	.word	0x080029a9
 80028e4:	080029a9 	.word	0x080029a9
 80028e8:	080029a9 	.word	0x080029a9
 80028ec:	080029a9 	.word	0x080029a9
 80028f0:	080029a9 	.word	0x080029a9
 80028f4:	080029a9 	.word	0x080029a9
 80028f8:	0800297d 	.word	0x0800297d
 80028fc:	080029a9 	.word	0x080029a9
 8002900:	080029a9 	.word	0x080029a9
 8002904:	080029a9 	.word	0x080029a9
 8002908:	080029a9 	.word	0x080029a9
 800290c:	080029a9 	.word	0x080029a9
 8002910:	080029a9 	.word	0x080029a9
 8002914:	080029a9 	.word	0x080029a9
 8002918:	08002993 	.word	0x08002993
 800291c:	080029a9 	.word	0x080029a9
 8002920:	080029a9 	.word	0x080029a9
 8002924:	080029a9 	.word	0x080029a9
 8002928:	080029a9 	.word	0x080029a9
 800292c:	080029a9 	.word	0x080029a9
 8002930:	080029a9 	.word	0x080029a9
 8002934:	080029a9 	.word	0x080029a9
 8002938:	080029b1 	.word	0x080029b1
 800293c:	080029a9 	.word	0x080029a9
 8002940:	080029a9 	.word	0x080029a9
 8002944:	080029a9 	.word	0x080029a9
 8002948:	080029a9 	.word	0x080029a9
 800294c:	080029a9 	.word	0x080029a9
 8002950:	080029a9 	.word	0x080029a9
 8002954:	080029a9 	.word	0x080029a9
 8002958:	080029b1 	.word	0x080029b1
 800295c:	080029a9 	.word	0x080029a9
 8002960:	080029a9 	.word	0x080029a9
 8002964:	080029a9 	.word	0x080029a9
 8002968:	080029a9 	.word	0x080029a9
 800296c:	080029a9 	.word	0x080029a9
 8002970:	080029a9 	.word	0x080029a9
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029b1 	.word	0x080029b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002980:	3308      	adds	r3, #8
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fd05 	bl	8003394 <RCCEx_PLL2_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002990:	e00f      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002996:	3328      	adds	r3, #40	@ 0x28
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fdac 	bl	80034f8 <RCCEx_PLL3_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80029a6:	e004      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029ae:	e000      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80029b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80029ba:	4bbf      	ldr	r3, [pc, #764]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80029c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c8:	4abb      	ldr	r2, [pc, #748]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80029ce:	e003      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f002 0302 	and.w	r3, r2, #2
 80029e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80029f2:	460b      	mov	r3, r1
 80029f4:	4313      	orrs	r3, r2
 80029f6:	d041      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80029f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d824      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002a02:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a55 	.word	0x08002a55
 8002a0c:	08002a21 	.word	0x08002a21
 8002a10:	08002a37 	.word	0x08002a37
 8002a14:	08002a55 	.word	0x08002a55
 8002a18:	08002a55 	.word	0x08002a55
 8002a1c:	08002a55 	.word	0x08002a55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a24:	3308      	adds	r3, #8
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fcb3 	bl	8003394 <RCCEx_PLL2_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a34:	e00f      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3a:	3328      	adds	r3, #40	@ 0x28
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fd5a 	bl	80034f8 <RCCEx_PLL3_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a4a:	e004      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a5e:	4b96      	ldr	r3, [pc, #600]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f023 0107 	bic.w	r1, r3, #7
 8002a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a6c:	4a92      	ldr	r2, [pc, #584]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a72:	e003      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f002 0304 	and.w	r3, r2, #4
 8002a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	d044      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d825      	bhi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002afd 	.word	0x08002afd
 8002ab4:	08002ac9 	.word	0x08002ac9
 8002ab8:	08002adf 	.word	0x08002adf
 8002abc:	08002afd 	.word	0x08002afd
 8002ac0:	08002afd 	.word	0x08002afd
 8002ac4:	08002afd 	.word	0x08002afd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002acc:	3308      	adds	r3, #8
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fc5f 	bl	8003394 <RCCEx_PLL2_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002adc:	e00f      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	3328      	adds	r3, #40	@ 0x28
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fd06 	bl	80034f8 <RCCEx_PLL3_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002af2:	e004      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002afa:	e000      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b06:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	f023 0107 	bic.w	r1, r3, #7
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b16:	4a68      	ldr	r2, [pc, #416]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f002 0320 	and.w	r3, r2, #32
 8002b32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b40:	460b      	mov	r3, r1
 8002b42:	4313      	orrs	r3, r2
 8002b44:	d055      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b52:	d033      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b58:	d82c      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5e:	d02f      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b64:	d826      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b6a:	d02b      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002b6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b70:	d820      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b76:	d012      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b7c:	d81a      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d022      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fbff 	bl	8003394 <RCCEx_PLL2_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b9c:	e015      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba2:	3328      	adds	r3, #40	@ 0x28
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fca6 	bl	80034f8 <RCCEx_PLL3_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002bb2:	e00a      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bba:	e006      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002bbc:	bf00      	nop
 8002bbe:	e004      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002bc0:	bf00      	nop
 8002bc2:	e002      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bd2:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a35      	ldr	r2, [pc, #212]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002be8:	e003      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002c08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	d058      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002c1e:	d033      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002c20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002c24:	d82c      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2a:	d02f      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c30:	d826      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c36:	d02b      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002c38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c3c:	d820      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c42:	d012      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c48:	d81a      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d022      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c52:	d115      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c58:	3308      	adds	r3, #8
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fb99 	bl	8003394 <RCCEx_PLL2_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c68:	e015      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	3328      	adds	r3, #40	@ 0x28
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fc40 	bl	80034f8 <RCCEx_PLL3_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c86:	e006      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c88:	bf00      	nop
 8002c8a:	e004      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10e      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cae:	4a02      	ldr	r2, [pc, #8]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002cb6:	bf00      	nop
 8002cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	d055      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002cec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002cf0:	d033      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002cf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002cf6:	d82c      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cfc:	d02f      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d02:	d826      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002d08:	d02b      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002d0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002d0e:	d820      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d14:	d012      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1a:	d81a      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d022      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d24:	d115      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fb30 	bl	8003394 <RCCEx_PLL2_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d3a:	e015      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d40:	3328      	adds	r3, #40	@ 0x28
 8002d42:	2102      	movs	r1, #2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fbd7 	bl	80034f8 <RCCEx_PLL3_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d50:	e00a      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d58:	e006      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e004      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e002      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d70:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d80:	4a9d      	ldr	r2, [pc, #628]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d82:	430b      	orrs	r3, r1
 8002d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d86:	e003      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f002 0308 	and.w	r3, r2, #8
 8002d9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002da6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002daa:	460b      	mov	r3, r1
 8002dac:	4313      	orrs	r3, r2
 8002dae:	d01e      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	3328      	adds	r3, #40	@ 0x28
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fb96 	bl	80034f8 <RCCEx_PLL3_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002dd8:	4b87      	ldr	r3, [pc, #540]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ddc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de8:	4a83      	ldr	r2, [pc, #524]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dea:	430b      	orrs	r3, r1
 8002dec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f002 0310 	and.w	r3, r2, #16
 8002dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	d01e      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e20:	3328      	adds	r3, #40	@ 0x28
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fb67 	bl	80034f8 <RCCEx_PLL3_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e36:	4b70      	ldr	r3, [pc, #448]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e46:	4a6c      	ldr	r2, [pc, #432]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002e58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d03e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e78:	d022      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002e7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e7e:	d81b      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e90:	3308      	adds	r3, #8
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fa7d 	bl	8003394 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00f      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea6:	3328      	adds	r3, #40	@ 0x28
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fb24 	bl	80034f8 <RCCEx_PLL3_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eca:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eda:	4a47      	ldr	r2, [pc, #284]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ef8:	2300      	movs	r3, #0
 8002efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002efc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002f00:	460b      	mov	r3, r1
 8002f02:	4313      	orrs	r3, r2
 8002f04:	d03b      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f12:	d01f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002f14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f18:	d818      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002f20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f24:	d007      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002f26:	e011      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f28:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	4a32      	ldr	r2, [pc, #200]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f34:	e00f      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3a:	3328      	adds	r3, #40	@ 0x28
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fada 	bl	80034f8 <RCCEx_PLL3_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f4a:	e004      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5e:	4b26      	ldr	r3, [pc, #152]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002f8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002f94:	460b      	mov	r3, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d034      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa8:	d007      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8002faa:	e011      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f9e6 	bl	8003394 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002fce:	e003      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	4a02      	ldr	r2, [pc, #8]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003010:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003012:	2300      	movs	r3, #0
 8003014:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003016:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	d00c      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	3328      	adds	r3, #40	@ 0x28
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fa65 	bl	80034f8 <RCCEx_PLL3_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003046:	663b      	str	r3, [r7, #96]	@ 0x60
 8003048:	2300      	movs	r3, #0
 800304a:	667b      	str	r3, [r7, #100]	@ 0x64
 800304c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d038      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800305e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003062:	d018      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003068:	d811      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800306a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800306e:	d014      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003074:	d80b      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800307a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800307e:	d106      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003080:	4bc3      	ldr	r3, [pc, #780]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	4ac2      	ldr	r2, [pc, #776]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800308a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800308c:	e008      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800309e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030a8:	4bb9      	ldr	r3, [pc, #740]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030b8:	4ab5      	ldr	r2, [pc, #724]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030ba:	430b      	orrs	r3, r1
 80030bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80030be:	e003      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80030d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030d6:	2300      	movs	r3, #0
 80030d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80030de:	460b      	mov	r3, r1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030e4:	4baa      	ldr	r3, [pc, #680]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f2:	4aa7      	ldr	r2, [pc, #668]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003104:	653b      	str	r3, [r7, #80]	@ 0x50
 8003106:	2300      	movs	r3, #0
 8003108:	657b      	str	r3, [r7, #84]	@ 0x54
 800310a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800310e:	460b      	mov	r3, r1
 8003110:	4313      	orrs	r3, r2
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003114:	4b9e      	ldr	r3, [pc, #632]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800311c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003120:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003124:	4a9a      	ldr	r2, [pc, #616]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003126:	430b      	orrs	r3, r1
 8003128:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003138:	2300      	movs	r3, #0
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800313c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003140:	460b      	mov	r3, r1
 8003142:	4313      	orrs	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003146:	4b92      	ldr	r3, [pc, #584]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003154:	4a8e      	ldr	r2, [pc, #568]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003156:	430b      	orrs	r3, r1
 8003158:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800315a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003166:	643b      	str	r3, [r7, #64]	@ 0x40
 8003168:	2300      	movs	r3, #0
 800316a:	647b      	str	r3, [r7, #68]	@ 0x44
 800316c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003170:	460b      	mov	r3, r1
 8003172:	4313      	orrs	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003176:	4b86      	ldr	r3, [pc, #536]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	4a85      	ldr	r2, [pc, #532]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800317c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003180:	6113      	str	r3, [r2, #16]
 8003182:	4b83      	ldr	r3, [pc, #524]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800318e:	4a80      	ldr	r2, [pc, #512]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003190:	430b      	orrs	r3, r1
 8003192:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80031a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031a2:	2300      	movs	r3, #0
 80031a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80031aa:	460b      	mov	r3, r1
 80031ac:	4313      	orrs	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80031b0:	4b77      	ldr	r3, [pc, #476]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	4a74      	ldr	r2, [pc, #464]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80031da:	460b      	mov	r3, r1
 80031dc:	4313      	orrs	r3, r2
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031f0:	4a67      	ldr	r2, [pc, #412]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	2100      	movs	r1, #0
 8003200:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003208:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800320c:	460b      	mov	r3, r1
 800320e:	4313      	orrs	r3, r2
 8003210:	d011      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003216:	3308      	adds	r3, #8
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f8ba 	bl	8003394 <RCCEx_PLL2_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	2100      	movs	r1, #0
 8003240:	6239      	str	r1, [r7, #32]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
 8003248:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800324c:	460b      	mov	r3, r1
 800324e:	4313      	orrs	r3, r2
 8003250:	d011      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003256:	3308      	adds	r3, #8
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f89a 	bl	8003394 <RCCEx_PLL2_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	2100      	movs	r1, #0
 8003280:	61b9      	str	r1, [r7, #24]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800328c:	460b      	mov	r3, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	d011      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003296:	3308      	adds	r3, #8
 8003298:	2102      	movs	r1, #2
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f87a 	bl	8003394 <RCCEx_PLL2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	2100      	movs	r1, #0
 80032c0:	6139      	str	r1, [r7, #16]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032cc:	460b      	mov	r3, r1
 80032ce:	4313      	orrs	r3, r2
 80032d0:	d011      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	3328      	adds	r3, #40	@ 0x28
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f90c 	bl	80034f8 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80032e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	2100      	movs	r1, #0
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800330c:	460b      	mov	r3, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	d011      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003316:	3328      	adds	r3, #40	@ 0x28
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f8ec 	bl	80034f8 <RCCEx_PLL3_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	2100      	movs	r1, #0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	e9d7 1200 	ldrd	r1, r2, [r7]
 800334c:	460b      	mov	r3, r1
 800334e:	4313      	orrs	r3, r2
 8003350:	d011      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003356:	3328      	adds	r3, #40	@ 0x28
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f8cc 	bl	80034f8 <RCCEx_PLL3_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003376:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800338a:	46bd      	mov	sp, r7
 800338c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003390:	58024400 	.word	0x58024400

08003394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033a2:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d101      	bne.n	80033b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e099      	b.n	80034e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80033b2:	4b4f      	ldr	r3, [pc, #316]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4e      	ldr	r2, [pc, #312]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80033b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033be:	f7fd fab9 	bl	8000934 <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80033c6:	f7fd fab5 	bl	8000934 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e086      	b.n	80034e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033d8:	4b45      	ldr	r3, [pc, #276]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80033e4:	4b42      	ldr	r3, [pc, #264]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	493f      	ldr	r1, [pc, #252]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	3b01      	subs	r3, #1
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	b29b      	uxth	r3, r3
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	3b01      	subs	r3, #1
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	3b01      	subs	r3, #1
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003428:	4931      	ldr	r1, [pc, #196]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800342e:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	492d      	ldr	r1, [pc, #180]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003440:	4b2b      	ldr	r3, [pc, #172]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	f023 0220 	bic.w	r2, r3, #32
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4928      	ldr	r1, [pc, #160]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003452:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003458:	f023 0310 	bic.w	r3, r3, #16
 800345c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800345e:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003462:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <RCCEx_PLL2_Config+0x160>)
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	69d2      	ldr	r2, [r2, #28]
 800346a:	00d2      	lsls	r2, r2, #3
 800346c:	4920      	ldr	r1, [pc, #128]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003472:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003478:	f043 0310 	orr.w	r3, r3, #16
 800347c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003484:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800348a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800348e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003490:	e00f      	b.n	80034b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003498:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4a14      	ldr	r2, [pc, #80]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 800349e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80034a4:	e005      	b.n	80034b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80034a6:	4b12      	ldr	r3, [pc, #72]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	4a11      	ldr	r2, [pc, #68]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80034ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80034b2:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a0e      	ldr	r2, [pc, #56]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80034b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034be:	f7fd fa39 	bl	8000934 <HAL_GetTick>
 80034c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034c6:	f7fd fa35 	bl	8000934 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e006      	b.n	80034e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <RCCEx_PLL2_Config+0x15c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	58024400 	.word	0x58024400
 80034f4:	ffff0007 	.word	0xffff0007

080034f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003506:	4b53      	ldr	r3, [pc, #332]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b03      	cmp	r3, #3
 8003510:	d101      	bne.n	8003516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e099      	b.n	800364a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003516:	4b4f      	ldr	r3, [pc, #316]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4e      	ldr	r2, [pc, #312]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003522:	f7fd fa07 	bl	8000934 <HAL_GetTick>
 8003526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003528:	e008      	b.n	800353c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800352a:	f7fd fa03 	bl	8000934 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e086      	b.n	800364a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800353c:	4b45      	ldr	r3, [pc, #276]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003548:	4b42      	ldr	r3, [pc, #264]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	051b      	lsls	r3, r3, #20
 8003556:	493f      	ldr	r1, [pc, #252]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	628b      	str	r3, [r1, #40]	@ 0x28
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	3b01      	subs	r3, #1
 8003562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	3b01      	subs	r3, #1
 800356c:	025b      	lsls	r3, r3, #9
 800356e:	b29b      	uxth	r3, r3
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	3b01      	subs	r3, #1
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800358c:	4931      	ldr	r1, [pc, #196]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003592:	4b30      	ldr	r3, [pc, #192]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	492d      	ldr	r1, [pc, #180]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80035a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4928      	ldr	r1, [pc, #160]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80035b6:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	4a26      	ldr	r2, [pc, #152]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80035c2:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035c6:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <RCCEx_PLL3_Config+0x160>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	69d2      	ldr	r2, [r2, #28]
 80035ce:	00d2      	lsls	r2, r2, #3
 80035d0:	4920      	ldr	r1, [pc, #128]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80035d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	4a1e      	ldr	r2, [pc, #120]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80035e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	4a19      	ldr	r2, [pc, #100]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035f4:	e00f      	b.n	8003616 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80035fc:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003608:	e005      	b.n	8003616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003610:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003616:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0e      	ldr	r2, [pc, #56]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003622:	f7fd f987 	bl	8000934 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003628:	e008      	b.n	800363c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800362a:	f7fd f983 	bl	8000934 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e006      	b.n	800364a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <RCCEx_PLL3_Config+0x15c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	58024400 	.word	0x58024400
 8003658:	ffff0007 	.word	0xffff0007

0800365c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e054      	b.n	8003718 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7a5b      	ldrb	r3, [r3, #9]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fc ff84 	bl	800058c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0120 	bic.w	r1, r3, #32
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0204 	orr.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	2b40      	cmp	r3, #64	@ 0x40
 80036bc:	d104      	bne.n	80036c8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2204      	movs	r2, #4
 80036c2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e027      	b.n	8003718 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80036c8:	f7fd f934 	bl	8000934 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80036ce:	e015      	b.n	80036fc <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80036d0:	f7fd f930 	bl	8000934 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d90e      	bls.n	80036fc <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d007      	beq.n	80036fc <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e00d      	b.n	8003718 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d1e2      	bne.n	80036d0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7a1b      	ldrb	r3, [r3, #8]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_RNG_GenerateRandomNumber+0x1a>
 8003736:	2302      	movs	r3, #2
 8003738:	e044      	b.n	80037c4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7a5b      	ldrb	r3, [r3, #9]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d133      	bne.n	80037b2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8003750:	f7fd f8f0 	bl	8000934 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003756:	e018      	b.n	800378a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003758:	f7fd f8ec 	bl	8000934 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d911      	bls.n	800378a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d00a      	beq.n	800378a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e01c      	b.n	80037c4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d1df      	bne.n	8003758 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	725a      	strb	r2, [r3, #9]
 80037b0:	e004      	b.n	80037bc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	721a      	strb	r2, [r3, #8]

  return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <memset>:
 80037cc:	4402      	add	r2, r0
 80037ce:	4603      	mov	r3, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	4d0d      	ldr	r5, [pc, #52]	@ (8003814 <__libc_init_array+0x38>)
 80037e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003818 <__libc_init_array+0x3c>)
 80037e2:	1b64      	subs	r4, r4, r5
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	2600      	movs	r6, #0
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	4d0b      	ldr	r5, [pc, #44]	@ (800381c <__libc_init_array+0x40>)
 80037ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003820 <__libc_init_array+0x44>)
 80037f0:	f000 f818 	bl	8003824 <_init>
 80037f4:	1b64      	subs	r4, r4, r5
 80037f6:	10a4      	asrs	r4, r4, #2
 80037f8:	2600      	movs	r6, #0
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	f855 3b04 	ldr.w	r3, [r5], #4
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	f855 3b04 	ldr.w	r3, [r5], #4
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	0800384c 	.word	0x0800384c
 8003818:	0800384c 	.word	0x0800384c
 800381c:	0800384c 	.word	0x0800384c
 8003820:	08003850 	.word	0x08003850

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
